<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\obj\RTOSDemo.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\obj\RTOSDemo.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5040049: Last Updated: Tue Nov 27 13:57:49 2018
<BR><P>
<H3>Maximum Stack Usage =        216 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
prvTimerTask &rArr; prvProcessTimerOrBlockTask &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[b]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">NMI_Handler</a><BR>
 <LI><a href="#[d]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">MemManage_Handler</a><BR>
 <LI><a href="#[e]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">BusFault_Handler</a><BR>
 <LI><a href="#[f]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">UsageFault_Handler</a><BR>
 <LI><a href="#[11]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">DebugMon_Handler</a><BR>
 <LI><a href="#[6a]">event_get_task</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6a]">event_get_task</a><BR>
 <LI><a href="#[82]">delay_ns</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[82]">delay_ns</a><BR>
 <LI><a href="#[19]">Default_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19]">Default_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[40]">ACMP01_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[3e]">ADC00_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[3f]">ADC01_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[41]">ADC02_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[42]">ADC03_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[14]">BOD_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[2c]">BRAKE0_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[30]">BRAKE1_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[e]">BusFault_Handler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[49]">CAN0_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[18]">CLKFAIL_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[3d]">DAC_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[3]">DM512_BLUE_DISPLAY</a> from dmx512_api.o(.text) referenced 2 times from dmx512_api.o(.data)
 <LI><a href="#[5]">DM512_CRAN_DISPLAY</a> from dmx512_api.o(.text) referenced 2 times from dmx512_api.o(.data)
 <LI><a href="#[2]">DM512_GREEN_DISPLAY</a> from dmx512_api.o(.text) referenced 2 times from dmx512_api.o(.data)
 <LI><a href="#[6]">DM512_PUPRLE_DISPLAY</a> from dmx512_api.o(.text) referenced 2 times from dmx512_api.o(.data)
 <LI><a href="#[9]">DM512_RACE_LAMP_DISPLAY</a> from dmx512_api.o(.text) referenced 2 times from dmx512_api.o(.data)
 <LI><a href="#[1]">DM512_RED_DISPLAY</a> from dmx512_api.o(.text) referenced 2 times from dmx512_api.o(.data)
 <LI><a href="#[4]">DM512_WHITE_DISPLAY</a> from dmx512_api.o(.text) referenced 2 times from dmx512_api.o(.data)
 <LI><a href="#[7]">DM512_YELLOW_DISPLAY</a> from dmx512_api.o(.text) referenced 2 times from dmx512_api.o(.data)
 <LI><a href="#[8]">DM512_gradual_change_DISPLAY</a> from dmx512_api.o(.text) referenced 2 times from dmx512_api.o(.data)
 <LI><a href="#[0]">DM512_loop_lamp_DISPLAY</a> from dmx512_api.o(.text) referenced 2 times from dmx512_api.o(.data)
 <LI><a href="#[c9]">DMX_Display</a> from dmx512_api.o(.text) referenced from dmx512_api.o(.text)
 <LI><a href="#[11]">DebugMon_Handler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[19]">Default_Handler</a> from startup_m451series.o(.text) referenced 9 times from startup_m451series.o(RESET)
 <LI><a href="#[1e]">EINT0_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[1f]">EINT1_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[20]">EINT2_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[21]">EINT3_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[22]">EINT4_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[23]">EINT5_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[24]">GPA_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[25]">GPB_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[26]">GPC_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[27]">GPD_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[28]">GPE_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[29]">GPF_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[c]">HardFault_Handler</a> from retarget.o(.emb_text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[4d]">Hard_Fault_Handler</a> from retarget.o(.text) referenced from retarget.o(.emb_text)
 <LI><a href="#[3a]">I2C0_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[3b]">I2C1_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[15]">IRC_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[d]">MemManage_Handler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[b]">NMI_Handler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[3c]">PDMA_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[2d]">PWM0P0_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[2e]">PWM0P1_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[2f]">PWM0P2_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[31]">PWM1P0_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[32]">PWM1P1_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[33]">PWM1P2_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[16]">PWRWU_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[12]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[d0]">RACE_LAMP_display</a> from dmx512_api.o(.text) referenced from dmx512_api.o(.text)
 <LI><a href="#[cd]">RACE_LAMP_fuc</a> from dmx512_api.o(.text) referenced from dmx512_api.o(.text)
 <LI><a href="#[17]">RAMPE_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[1a]">RTC_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[a]">Reset_Handler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[4a]">SC0_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[2a]">SPI0_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[2b]">SPI1_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[45]">SPI2_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[10]">SVC_Handler</a> from port.o(.emb_text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[13]">SysTick_Handler</a> from port.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[4e]">SystemInit</a> from system_m451series.o(.text) referenced from startup_m451series.o(.text)
 <LI><a href="#[1b]">TAMPER_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[4b]">TK_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[34]">TMR0_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[35]">TMR1_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[36]">TMR2_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[37]">TMR3_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[38]">UART0_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[39]">UART1_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[43]">UART2_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[44]">UART3_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[46]">USBD_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[47]">USBH_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[48]">USBOTG_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[f]">UsageFault_Handler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[1c]">WDT_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[1d]">WWDT_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[4f]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_m451series.o(.text)
 <LI><a href="#[54]">_sputc</a> from printf5.o(i._sputc) referenced from printf5.o(i.__0sprintf$5)
 <LI><a href="#[98]">data_handle_fuc</a> from event_process.o(.text) referenced from event_process.o(.text)
 <LI><a href="#[6a]">event_get_task</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[aa]">event_loop</a> from event_process.o(.text) referenced from event_process.o(.text)
 <LI><a href="#[53]">fputc</a> from retarget.o(.text) referenced from printf5.o(i.__0printf$5)
 <LI><a href="#[cb]">gradual_change_display</a> from dmx512_api.o(.text) referenced from dmx512_api.o(.text)
 <LI><a href="#[cc]">gradual_display</a> from dmx512_api.o(.text) referenced from dmx512_api.o(.text)
 <LI><a href="#[a3]">key1_fuc</a> from event_process.o(.text) referenced from event_process.o(.text)
 <LI><a href="#[a9]">key1_long_fuc</a> from event_process.o(.text) referenced from event_process.o(.text)
 <LI><a href="#[a6]">key2_fuc</a> from event_process.o(.text) referenced from event_process.o(.text)
 <LI><a href="#[ae]">key2_long_fuc</a> from event_process.o(.text) referenced from event_process.o(.text)
 <LI><a href="#[a7]">key3_fuc</a> from event_process.o(.text) referenced from event_process.o(.text)
 <LI><a href="#[af]">key3_long_fuc</a> from event_process.o(.text) referenced from event_process.o(.text)
 <LI><a href="#[a8]">key4_fuc</a> from event_process.o(.text) referenced from event_process.o(.text)
 <LI><a href="#[b0]">key4_long_fuc</a> from event_process.o(.text) referenced from event_process.o(.text)
 <LI><a href="#[4c]">main</a> from main.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[51]">prvIdleTask</a> from tasks.o(.text) referenced from tasks.o(.text)
 <LI><a href="#[52]">prvTimerTask</a> from timers.o(.text) referenced from timers.o(.text)
 <LI><a href="#[50]">ui_display_fuc</a> from main.o(.text) referenced from main.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[4f]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(.text)
</UL>
<P><STRONG><a name="[13d]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[5e]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[139]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[13e]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[13f]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[140]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[141]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[142]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[10]"></a>SVC_Handler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[120]"></a>__asm___6_port_c_39a90d8d__prvStartFirstTask</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[11f]"></a>__asm___6_port_c_39a90d8d__prvEnableVFP</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[12]"></a>PendSV_Handler</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PendSV_Handler &rArr; vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>ulPortSetInterruptMask</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCountFromISR
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskEndScheduler
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIsTaskSuspended
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskIncrementTick
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationMallocFailedHook
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueIsQueueFullFromISR
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueIsQueueEmptyFromISR
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaitingFromISR
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphore
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
</UL>

<P><STRONG><a name="[e8]"></a>vPortClearInterruptMask</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCountFromISR
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
</UL>

<P><STRONG><a name="[c]"></a>HardFault_Handler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, retarget.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 128 bytes, Stack size 12 bytes, system_m451series.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupHardware
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetCPUFreq
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetHCLKFreq
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPCLK1Freq
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPCLK0Freq
</UL>

<P><STRONG><a name="[4e]"></a>SystemInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, system_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(.text)
</UL>
<P><STRONG><a name="[a]"></a>Reset_Handler</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>ACMP01_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>ADC00_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>ADC01_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>ADC02_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>ADC03_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>BRAKE0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>BRAKE1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>CAN0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>CLKFAIL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>EINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>EINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>EINT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EINT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EINT4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EINT5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>GPA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>GPB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>GPC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>GPD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>GPE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>GPF_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>IRC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>PDMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>PWM0P0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>PWM0P1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>PWM0P2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>PWM1P0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>PWM1P1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>PWM1P2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>PWRWU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>RAMPE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>SC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>TK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TMR0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TMR1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TMR2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TMR3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>USBD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>USBH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>USBOTG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>WWDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>vApplicationMallocFailedHook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[ea]"></a>vApplicationIdleHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[63]"></a>vApplicationStackOverflowHook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
</UL>

<P><STRONG><a name="[de]"></a>vApplicationTickHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskIncrementTick
</UL>

<P><STRONG><a name="[64]"></a>vCheckTask2</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM16703P_write_data
</UL>

<P><STRONG><a name="[6a]"></a>event_get_task</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + In Cycle
<LI>Call Chain = event_get_task &rArr;  event_get_task (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_key_press_event
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_get_task
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_get_task
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[4c]"></a>main</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = main &rArr; vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_process
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMX_Init
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupHardware
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[7b]"></a>gpio_init</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = gpio_init &rArr; GPIO_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupHardware
</UL>

<P><STRONG><a name="[7a]"></a>UART2_Init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART2_Init &rArr; UART2_Open &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Open
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ResetModule
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupHardware
</UL>

<P><STRONG><a name="[7f]"></a>FMC_Init</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FMC_Init &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Open
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key2_fuc
</UL>

<P><STRONG><a name="[81]"></a>transfer_command</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, st7567.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = transfer_command
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ns
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_address
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initial_lcd
</UL>

<P><STRONG><a name="[83]"></a>transfer_data</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, st7567.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = transfer_data
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ns
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_num_8x16
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_string_8x16
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_graphic_8x16
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_graphic_16x16
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_graphic_16xn
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_screen
</UL>

<P><STRONG><a name="[85]"></a>delay</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, st7567.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initial_lcd
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;waitkey
</UL>

<P><STRONG><a name="[84]"></a>waitkey</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, st7567.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>

<P><STRONG><a name="[86]"></a>initial_lcd</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, st7567.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = initial_lcd &rArr; transfer_command
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_command
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_display_init
</UL>

<P><STRONG><a name="[87]"></a>lcd_address</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, st7567.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lcd_address &rArr; transfer_command
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_command
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_num_8x16
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_string_8x16
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_graphic_8x16
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_graphic_16x16
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_graphic_16xn
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_screen
</UL>

<P><STRONG><a name="[88]"></a>clear_screen</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, st7567.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = clear_screen &rArr; lcd_address &rArr; transfer_command
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_address
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_data
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_data
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_display_init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_display
</UL>

<P><STRONG><a name="[89]"></a>display_graphic_16xn</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, st7567.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = display_graphic_16xn &rArr; lcd_address &rArr; transfer_command
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_address
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_data
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_Chinese_list
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_display_init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_display
</UL>

<P><STRONG><a name="[8a]"></a>display_graphic_16x16</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, st7567.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = display_graphic_16x16 &rArr; lcd_address &rArr; transfer_command
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_address
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_data
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_nx16x16
</UL>

<P><STRONG><a name="[8b]"></a>display_nx16x16</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, st7567.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = display_nx16x16 &rArr; display_graphic_16x16 &rArr; lcd_address &rArr; transfer_command
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_graphic_16x16
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_display
</UL>

<P><STRONG><a name="[8c]"></a>display_Chinese_list</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, st7567.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = display_Chinese_list &rArr; display_graphic_16xn &rArr; lcd_address &rArr; transfer_command
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_graphic_16xn
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_display
</UL>

<P><STRONG><a name="[8d]"></a>display_graphic_8x16</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, st7567.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_address
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_data
</UL>

<P><STRONG><a name="[8e]"></a>display_string_8x16</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, st7567.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = display_string_8x16 &rArr; lcd_address &rArr; transfer_command
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_address
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_data
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_data
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_display_init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_display
</UL>

<P><STRONG><a name="[8f]"></a>display_num_8x16</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, st7567.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = display_num_8x16 &rArr; lcd_address &rArr; transfer_command
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_address
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_data
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_num_string_8x16
</UL>

<P><STRONG><a name="[90]"></a>display_num_string_8x16</STRONG> (Thumb, 340 bytes, Stack size 56 bytes, st7567.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = display_num_string_8x16 &rArr; display_num_8x16 &rArr; lcd_address &rArr; transfer_command
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_num_8x16
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_display
</UL>

<P><STRONG><a name="[67]"></a>ui_display_init</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, st7567_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ui_display_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_string_8x16
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_graphic_16xn
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_screen
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initial_lcd
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_display_fuc
</UL>

<P><STRONG><a name="[68]"></a>ui_display</STRONG> (Thumb, 4660 bytes, Stack size 40 bytes, st7567_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ui_display &rArr; display_num_string_8x16 &rArr; display_num_8x16 &rArr; lcd_address &rArr; transfer_command
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_num_string_8x16
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_string_8x16
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_Chinese_list
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_nx16x16
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_graphic_16xn
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_screen
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key1_long_fuc
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key4_fuc
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key3_fuc
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key2_fuc
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key1_fuc
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_handle_fuc
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_display_fuc
</UL>

<P><STRONG><a name="[94]"></a>test_arg</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, event_process.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_switch_sm17500x
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[96]"></a>uart_switch</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, event_process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = uart_switch &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Open
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key4_fuc
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key3_fuc
</UL>

<P><STRONG><a name="[98]"></a>data_handle_fuc</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, event_process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = data_handle_fuc &rArr; ui_display &rArr; display_num_string_8x16 &rArr; display_num_8x16 &rArr; lcd_address &rArr; transfer_command
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskGetState
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_display
</UL>
<BR>[Address Reference Count : 1]<UL><LI> event_process.o(.text)
</UL>
<P><STRONG><a name="[9a]"></a>save_data</STRONG> (Thumb, 456 bytes, Stack size 40 bytes, event_process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = save_data &rArr; SM165XX_Send_addr &rArr; DMX_SendPacket
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm1751x_write_arg
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm1751x_Write_addr
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm17500x_write_elect_arg
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm17500x_write_arg
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm17500x_send_self_channel
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm17500x_send_self_add
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm17500x_send_add
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM165XX_Send_addr
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_string_8x16
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_screen
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key3_fuc
</UL>

<P><STRONG><a name="[a3]"></a>key1_fuc</STRONG> (Thumb, 708 bytes, Stack size 24 bytes, event_process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = key1_fuc &rArr; ui_display &rArr; display_num_string_8x16 &rArr; display_num_8x16 &rArr; lcd_address &rArr; transfer_command
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskGetState
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Open
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_display
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> event_process.o(.text)
</UL>
<P><STRONG><a name="[a4]"></a>send_event</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, event_process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = send_event &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key1_long_fuc
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key2_fuc
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_key_press_event
</UL>

<P><STRONG><a name="[a6]"></a>key2_fuc</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, event_process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = key2_fuc &rArr; ui_display &rArr; display_num_string_8x16 &rArr; display_num_8x16 &rArr; lcd_address &rArr; transfer_command
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_event
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_display
</UL>
<BR>[Address Reference Count : 1]<UL><LI> event_process.o(.text)
</UL>
<P><STRONG><a name="[a7]"></a>key3_fuc</STRONG> (Thumb, 1068 bytes, Stack size 32 bytes, event_process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = key3_fuc &rArr; ui_display &rArr; display_num_string_8x16 &rArr; display_num_8x16 &rArr; lcd_address &rArr; transfer_command
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_data
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_switch
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_display
</UL>
<BR>[Address Reference Count : 1]<UL><LI> event_process.o(.text)
</UL>
<P><STRONG><a name="[a8]"></a>key4_fuc</STRONG> (Thumb, 1048 bytes, Stack size 40 bytes, event_process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = key4_fuc &rArr; ui_display &rArr; display_num_string_8x16 &rArr; display_num_8x16 &rArr; lcd_address &rArr; transfer_command
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_switch
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_display
</UL>
<BR>[Address Reference Count : 1]<UL><LI> event_process.o(.text)
</UL>
<P><STRONG><a name="[a9]"></a>key1_long_fuc</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, event_process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = key1_long_fuc &rArr; ui_display &rArr; display_num_string_8x16 &rArr; display_num_8x16 &rArr; lcd_address &rArr; transfer_command
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_event
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_display
</UL>
<BR>[Address Reference Count : 1]<UL><LI> event_process.o(.text)
</UL>
<P><STRONG><a name="[ae]"></a>key2_long_fuc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, event_process.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> event_process.o(.text)
</UL>
<P><STRONG><a name="[af]"></a>key3_long_fuc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, event_process.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> event_process.o(.text)
</UL>
<P><STRONG><a name="[b0]"></a>key4_long_fuc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, event_process.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> event_process.o(.text)
</UL>
<P><STRONG><a name="[143]"></a>add_event</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, event_process.o(.text), UNUSED)

<P><STRONG><a name="[144]"></a>remove_event</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, event_process.o(.text), UNUSED)

<P><STRONG><a name="[aa]"></a>event_loop</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, event_process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = event_loop &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> event_process.o(.text)
</UL>
<P><STRONG><a name="[ac]"></a>event_init</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, event_process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = event_init &rArr; xTaskGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_process
</UL>

<P><STRONG><a name="[6e]"></a>event_process</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, event_process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = event_process &rArr; event_init &rArr; xTaskGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_init
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b1]"></a>digital_read</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, get_event.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_key_press_event
</UL>

<P><STRONG><a name="[6b]"></a>check_key_press_event</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, get_event.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = check_key_press_event &rArr; send_event &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digital_read
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_event
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_get_task
</UL>

<P><STRONG><a name="[b3]"></a>delay_us</STRONG> (Thumb, 148 bytes, Stack size 0 bytes, dmx512.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM16714P_write_data
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM16803P_write_data
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM16804P_write_data2
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm1752x_write_elect_arg
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm1752x_write_arg
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm1752x_send_add
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RZ_Protocol
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_add
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMX_SendPacket
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm1751x_write_arg
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm17500x_write_elect_arg
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm17500x_write_arg
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm17500x_send_self_channel
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm17500x_send_self_add
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm17500x_send_add
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM165XX_Send_addr
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM16703P_write_data
</UL>

<P><STRONG><a name="[b2]"></a>delay_ms</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, dmx512.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm1752x_write_elect_arg
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm1752x_write_arg
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm1752x_send_add
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_add
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm1751x_write_arg
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm17500x_write_elect_arg
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm17500x_write_arg
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm17500x_send_self_channel
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm17500x_send_self_add
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm17500x_send_add
</UL>

<P><STRONG><a name="[82]"></a>delay_ns</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dmx512.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ns
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ns
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_data
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_command
</UL>

<P><STRONG><a name="[b6]"></a>DMX_DataDecode</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, dmx512.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMX_DataDecode
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMX_Send_data
</UL>

<P><STRONG><a name="[b4]"></a>DMX_SendPacket</STRONG> (Thumb, 218 bytes, Stack size 32 bytes, dmx512.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMX_SendPacket
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RACE_LAMP_fuc
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMX512_Clear_init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMX_Send_data
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM165XX_Send_addr
</UL>

<P><STRONG><a name="[b5]"></a>DMX_Send_data</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, dmx512.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMX_Send_data &rArr; DMX_SendPacket
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMX_SendPacket
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMX_DataDecode
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM512_YELLOW_DISPLAY
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM512_PUPRLE_DISPLAY
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM512_CRAN_DISPLAY
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM512_WHITE_DISPLAY
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM512_BLUE_DISPLAY
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM512_GREEN_DISPLAY
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM512_RED_DISPLAY
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMX_color_display
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gradual_change_display
</UL>

<P><STRONG><a name="[b9]"></a>fanx</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, dmx512.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm1752x_send_add
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_switch_sm1751x
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_add
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm17500x_send_self_add
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm17500x_send_add
</UL>

<P><STRONG><a name="[be]"></a>fanx1</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, dmx512.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm1752x_send_add
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm17500x_send_self_add
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm17500x_send_add
</UL>

<P><STRONG><a name="[ba]"></a>fanxll</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, dmx512.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fanxll
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_add
</UL>

<P><STRONG><a name="[b7]"></a>DMX512_Clear_init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, dmx512.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMX512_Clear_init &rArr; DMX_SendPacket
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMX_SendPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm1751x_Write_addr
</UL>

<P><STRONG><a name="[b8]"></a>send_add</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmx512.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = send_add &rArr; fanxll
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fanxll
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fanx
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm1751x_Write_addr
</UL>

<P><STRONG><a name="[9c]"></a>sm1751x_Write_addr</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dmx512.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sm1751x_Write_addr &rArr; send_add &rArr; fanxll
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_add
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMX512_Clear_init
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_data
</UL>

<P><STRONG><a name="[bb]"></a>arg_switch_sm1751x</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, dmx512.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = arg_switch_sm1751x
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fanx
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm1751x_write_arg
</UL>

<P><STRONG><a name="[9b]"></a>sm1751x_write_arg</STRONG> (Thumb, 200 bytes, Stack size 20 bytes, dmx512.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = sm1751x_write_arg &rArr; arg_switch_sm1751x
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_switch_sm1751x
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_data
</UL>

<P><STRONG><a name="[bc]"></a>RZ_Protocol</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, dmx512.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RZ_Protocol
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM165XX_Send_addr
</UL>

<P><STRONG><a name="[9d]"></a>SM165XX_Send_addr</STRONG> (Thumb, 250 bytes, Stack size 56 bytes, dmx512.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SM165XX_Send_addr &rArr; DMX_SendPacket
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RZ_Protocol
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMX_SendPacket
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_data
</UL>

<P><STRONG><a name="[bd]"></a>sm1752x_send_add</STRONG> (Thumb, 198 bytes, Stack size 48 bytes, dmx512.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fanx1
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fanx
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>

<P><STRONG><a name="[c0]"></a>arg_switch_sm1752x</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, dmx512.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm1752x_write_elect_arg
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm1752x_write_arg
</UL>

<P><STRONG><a name="[bf]"></a>sm1752x_write_arg</STRONG> (Thumb, 166 bytes, Stack size 20 bytes, dmx512.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_switch_sm1752x
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>

<P><STRONG><a name="[c1]"></a>sm1752x_write_elect_arg</STRONG> (Thumb, 154 bytes, Stack size 20 bytes, dmx512.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_switch_sm1752x
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>

<P><STRONG><a name="[9e]"></a>sm17500x_send_add</STRONG> (Thumb, 216 bytes, Stack size 48 bytes, dmx512.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = sm17500x_send_add &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fanx1
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fanx
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_data
</UL>

<P><STRONG><a name="[9f]"></a>sm17500x_send_self_add</STRONG> (Thumb, 192 bytes, Stack size 36 bytes, dmx512.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sm17500x_send_self_add &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fanx1
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fanx
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_data
</UL>

<P><STRONG><a name="[95]"></a>arg_switch_sm17500x</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, dmx512.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm17500x_write_elect_arg
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm17500x_write_arg
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_arg
</UL>

<P><STRONG><a name="[a2]"></a>sm17500x_write_arg</STRONG> (Thumb, 166 bytes, Stack size 20 bytes, dmx512.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sm17500x_write_arg &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_switch_sm17500x
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_data
</UL>

<P><STRONG><a name="[a0]"></a>sm17500x_write_elect_arg</STRONG> (Thumb, 158 bytes, Stack size 20 bytes, dmx512.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sm17500x_write_elect_arg &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arg_switch_sm17500x
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_data
</UL>

<P><STRONG><a name="[a1]"></a>sm17500x_send_self_channel</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, dmx512.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = sm17500x_send_self_channel &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_data
</UL>

<P><STRONG><a name="[c5]"></a>RZ_Write_data</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, dmx512.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RZ_Write_data
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM16714P_write_data
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM16803P_write_data
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM16703P_write_data
</UL>

<P><STRONG><a name="[c8]"></a>RZ_Write_Low_5_bit_data</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, dmx512.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM16714P_write_data
</UL>

<P><STRONG><a name="[c2]"></a>SM16804P_write_data2</STRONG> (Thumb, 410 bytes, Stack size 68 bytes, dmx512.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SM16804P_write_data2
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM16804P_Display
</UL>

<P><STRONG><a name="[c3]"></a>SM16804P_Display</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dmx512.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SM16804P_Display &rArr; SM16804P_write_data2
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM16804P_write_data2
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM512_YELLOW_DISPLAY
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM512_PUPRLE_DISPLAY
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM512_CRAN_DISPLAY
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM512_WHITE_DISPLAY
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM512_BLUE_DISPLAY
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM512_GREEN_DISPLAY
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM512_RED_DISPLAY
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gradual_change_display
</UL>

<P><STRONG><a name="[c4]"></a>SM16803P_write_data</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, dmx512.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RZ_Write_data
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>

<P><STRONG><a name="[65]"></a>SM16703P_write_data</STRONG> (Thumb, 62 bytes, Stack size 20 bytes, dmx512.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SM16703P_write_data &rArr; RZ_Write_data
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RZ_Write_data
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM16703P_Display
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vCheckTask2
</UL>

<P><STRONG><a name="[c6]"></a>SM16703P_Display</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dmx512.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SM16703P_Display &rArr; SM16703P_write_data &rArr; RZ_Write_data
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM16703P_write_data
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM512_YELLOW_DISPLAY
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM512_PUPRLE_DISPLAY
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM512_CRAN_DISPLAY
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM512_WHITE_DISPLAY
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM512_BLUE_DISPLAY
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM512_GREEN_DISPLAY
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM512_RED_DISPLAY
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gradual_change_display
</UL>

<P><STRONG><a name="[c7]"></a>SM16714P_write_data</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, dmx512.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RZ_Write_Low_5_bit_data
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RZ_Write_data
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>

<P><STRONG><a name="[ca]"></a>color_setup</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, dmx512_api.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMX_Display
</UL>

<P><STRONG><a name="[c9]"></a>DMX_Display</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dmx512_api.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_setup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dmx512_api.o(.text)
</UL>
<P><STRONG><a name="[cb]"></a>gradual_change_display</STRONG> (Thumb, 328 bytes, Stack size 24 bytes, dmx512_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = gradual_change_display &rArr; SM16804P_Display &rArr; SM16804P_write_data2
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM16703P_Display
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM16804P_Display
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMX_Send_data
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dmx512_api.o(.text)
</UL>
<P><STRONG><a name="[cc]"></a>gradual_display</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, dmx512_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gradual_display &rArr; vTaskSuspend &rArr; vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskGetState
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dmx512_api.o(.text)
</UL>
<P><STRONG><a name="[6d]"></a>DMX_Init</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, dmx512_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = DMX_Init &rArr; xTaskGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cd]"></a>RACE_LAMP_fuc</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, dmx512_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = RACE_LAMP_fuc &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMX_SendPacket
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dmx512_api.o(.text)
</UL>
<P><STRONG><a name="[ce]"></a>DMX_color_display</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, dmx512_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMX_Send_data
</UL>

<P><STRONG><a name="[cf]"></a>dealay_dm512</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, dmx512_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = dealay_dm512 &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM512_gradual_change_DISPLAY
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM512_YELLOW_DISPLAY
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM512_PUPRLE_DISPLAY
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM512_CRAN_DISPLAY
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM512_WHITE_DISPLAY
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM512_BLUE_DISPLAY
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM512_GREEN_DISPLAY
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM512_RED_DISPLAY
</UL>

<P><STRONG><a name="[d0]"></a>RACE_LAMP_display</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, dmx512_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RACE_LAMP_display &rArr; vTaskDelete
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dmx512_api.o(.text)
</UL>
<P><STRONG><a name="[d2]"></a>color_loop</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, dmx512_api.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM512_loop_lamp_DISPLAY
</UL>

<P><STRONG><a name="[0]"></a>DM512_loop_lamp_DISPLAY</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, dmx512_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DM512_loop_lamp_DISPLAY &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_loop
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dmx512_api.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>DM512_RED_DISPLAY</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, dmx512_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = DM512_RED_DISPLAY &rArr; dealay_dm512 &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dealay_dm512
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM16703P_Display
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM16804P_Display
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMX_Send_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dmx512_api.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>DM512_GREEN_DISPLAY</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, dmx512_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = DM512_GREEN_DISPLAY &rArr; dealay_dm512 &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dealay_dm512
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM16703P_Display
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM16804P_Display
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMX_Send_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dmx512_api.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>DM512_BLUE_DISPLAY</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, dmx512_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = DM512_BLUE_DISPLAY &rArr; dealay_dm512 &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dealay_dm512
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM16703P_Display
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM16804P_Display
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMX_Send_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dmx512_api.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>DM512_WHITE_DISPLAY</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, dmx512_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = DM512_WHITE_DISPLAY &rArr; dealay_dm512 &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dealay_dm512
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM16703P_Display
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM16804P_Display
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMX_Send_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dmx512_api.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>DM512_CRAN_DISPLAY</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, dmx512_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = DM512_CRAN_DISPLAY &rArr; dealay_dm512 &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dealay_dm512
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM16703P_Display
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM16804P_Display
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMX_Send_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dmx512_api.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>DM512_PUPRLE_DISPLAY</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, dmx512_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = DM512_PUPRLE_DISPLAY &rArr; dealay_dm512 &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dealay_dm512
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM16703P_Display
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM16804P_Display
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMX_Send_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dmx512_api.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>DM512_YELLOW_DISPLAY</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, dmx512_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = DM512_YELLOW_DISPLAY &rArr; dealay_dm512 &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dealay_dm512
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM16703P_Display
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM16804P_Display
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMX_Send_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dmx512_api.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>DM512_gradual_change_DISPLAY</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dmx512_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DM512_gradual_change_DISPLAY &rArr; dealay_dm512 &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dealay_dm512
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dmx512_api.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>DM512_RACE_LAMP_DISPLAY</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, dmx512_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = DM512_RACE_LAMP_DISPLAY &rArr; xTaskGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dmx512_api.o(.data)
</UL>
<P><STRONG><a name="[6f]"></a>xTaskGenericCreate</STRONG> (Thumb, 376 bytes, Stack size 56 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xTaskGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYieldFromISR
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM512_RACE_LAMP_DISPLAY
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_init
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMX_Init
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d1]"></a>vTaskDelete</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskDelete
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYieldFromISR
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RACE_LAMP_display
</UL>

<P><STRONG><a name="[dd]"></a>vTaskIncrementTick</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationTickHook
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[df]"></a>xTaskResumeAll</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYieldFromISR
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskIncrementTick
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskList
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>

<P><STRONG><a name="[e3]"></a>vTaskSuspendAll</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskList
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>

<P><STRONG><a name="[e2]"></a>vTaskDelayUntil</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYieldFromISR
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
</UL>

<P><STRONG><a name="[66]"></a>vTaskDelay</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYieldFromISR
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM512_loop_lamp_DISPLAY
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dealay_dm512
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RACE_LAMP_fuc
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gradual_change_display
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_loop
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_data
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_switch
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_display_init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_process
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_key_press_event
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_get_task
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vCheckTask2
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_display_fuc
</UL>

<P><STRONG><a name="[99]"></a>eTaskGetState</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = eTaskGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gradual_display
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key1_fuc
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_handle_fuc
</UL>

<P><STRONG><a name="[e4]"></a>uxTaskPriorityGet</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>

<P><STRONG><a name="[e5]"></a>vTaskPrioritySet</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYieldFromISR
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
</UL>

<P><STRONG><a name="[60]"></a>vTaskSwitchContext</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[69]"></a>vTaskSuspend</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vTaskSuspend &rArr; vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYieldFromISR
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gradual_display
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key3_fuc
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key1_fuc
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_data
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_handle_fuc
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_switch
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_display_fuc
</UL>

<P><STRONG><a name="[e6]"></a>xTaskIsTaskSuspended</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xTaskIsTaskSuspended
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
</UL>

<P><STRONG><a name="[97]"></a>vTaskResume</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vTaskResume &rArr; xTaskIsTaskSuspended
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYieldFromISR
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIsTaskSuspended
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key3_fuc
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key1_fuc
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_data
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_handle_fuc
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_switch
</UL>

<P><STRONG><a name="[e7]"></a>xTaskResumeFromISR</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortClearInterruptMask
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIsTaskSuspended
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
</UL>

<P><STRONG><a name="[71]"></a>vTaskStartScheduler</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ed]"></a>vTaskEndScheduler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEndScheduler
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
</UL>

<P><STRONG><a name="[ef]"></a>xTaskGetTickCount</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xTaskGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[f0]"></a>xTaskGetTickCountFromISR</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortClearInterruptMask
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
</UL>

<P><STRONG><a name="[145]"></a>uxTaskGetNumberOfTasks</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(.text), UNUSED)

<P><STRONG><a name="[f4]"></a>vTaskList</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvListTaskWithinSingleList
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>

<P><STRONG><a name="[f5]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[f6]"></a>vTaskPlaceOnEventListRestricted</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[f7]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
</UL>

<P><STRONG><a name="[f8]"></a>vTaskSetTimeOutState</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vTaskSetTimeOutState
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[f9]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskCheckForTimeOut &rArr; vTaskSetTimeOutState
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[10d]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[146]"></a>uxTaskGetTaskNumber</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(.text), UNUSED)

<P><STRONG><a name="[147]"></a>vTaskSetTaskNumber</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(.text), UNUSED)

<P><STRONG><a name="[10f]"></a>xTaskGetCurrentTaskHandle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
</UL>

<P><STRONG><a name="[ff]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[fa]"></a>vTaskPriorityInherit</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskPriorityInherit
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[fb]"></a>vTaskPriorityDisinherit</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[fd]"></a>xTimerGenericCommand</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
</UL>

<P><STRONG><a name="[eb]"></a>xTimerCreateTimerTask</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = xTimerCreateTimerTask &rArr; xTaskGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[105]"></a>xTimerCreate</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, timers.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
</UL>

<P><STRONG><a name="[106]"></a>xTimerIsTimerActive</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, timers.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>

<P><STRONG><a name="[148]"></a>pvTimerGetTimerID</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, timers.o(.text), UNUSED)

<P><STRONG><a name="[d9]"></a>vListInitialise</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>

<P><STRONG><a name="[d7]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[da]"></a>vListInsertEnd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinherit
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskIncrementTick
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
</UL>

<P><STRONG><a name="[e1]"></a>vListInsert</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, list.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[dc]"></a>uxListRemove</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinherit
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskIncrementTick
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>

<P><STRONG><a name="[108]"></a>xQueueGenericReset</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYieldFromISR
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[ad]"></a>xQueueGenericCreate</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateSet
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphore
</UL>

<P><STRONG><a name="[a5]"></a>xQueueGenericSend</STRONG> (Thumb, 256 bytes, Stack size 56 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYieldFromISR
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_event
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
</UL>

<P><STRONG><a name="[91]"></a>xQueueCreateMutex</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = xQueueCreateMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_display_init
</UL>

<P><STRONG><a name="[10e]"></a>xQueueGiveMutexRecursive</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
</UL>

<P><STRONG><a name="[ab]"></a>xQueueGenericReceive</STRONG> (Thumb, 292 bytes, Stack size 56 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYieldFromISR
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_loop
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSelectFromSet
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
</UL>

<P><STRONG><a name="[111]"></a>xQueueTakeMutexRecursive</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
</UL>

<P><STRONG><a name="[112]"></a>xQueueCreateCountingSemaphore</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
</UL>

<P><STRONG><a name="[fe]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = xQueueGenericSendFromISR &rArr; prvNotifyQueueSetContainer &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortClearInterruptMask
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[113]"></a>xQueueReceiveFromISR</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortClearInterruptMask
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSelectFromSetFromISR
</UL>

<P><STRONG><a name="[114]"></a>uxQueueMessagesWaiting</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
</UL>

<P><STRONG><a name="[115]"></a>uxQueueMessagesWaitingFromISR</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
</UL>

<P><STRONG><a name="[116]"></a>vQueueDelete</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
</UL>

<P><STRONG><a name="[149]"></a>ucQueueGetQueueNumber</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, queue.o(.text), UNUSED)

<P><STRONG><a name="[14a]"></a>vQueueSetQueueNumber</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, queue.o(.text), UNUSED)

<P><STRONG><a name="[14b]"></a>ucQueueGetQueueType</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, queue.o(.text), UNUSED)

<P><STRONG><a name="[117]"></a>xQueueIsQueueEmptyFromISR</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
</UL>

<P><STRONG><a name="[118]"></a>xQueueIsQueueFullFromISR</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
</UL>

<P><STRONG><a name="[14c]"></a>vQueueAddToRegistry</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, queue.o(.text), UNUSED)

<P><STRONG><a name="[107]"></a>vQueueWaitForMessageRestricted</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vQueueWaitForMessageRestricted &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[119]"></a>xQueueCreateSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[11a]"></a>xQueueAddToSet</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>

<P><STRONG><a name="[11b]"></a>xQueueRemoveFromSet</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>

<P><STRONG><a name="[11c]"></a>xQueueSelectFromSet</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[11d]"></a>xQueueSelectFromSetFromISR</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
</UL>

<P><STRONG><a name="[d8]"></a>pxPortInitialiseStack</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pxPortInitialiseStack
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[11e]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, port.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[ec]"></a>xPortStartScheduler</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvEnableVFP
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[ee]"></a>vPortEndScheduler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, port.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskEndScheduler
</UL>

<P><STRONG><a name="[db]"></a>vPortYieldFromISR</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, port.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>

<P><STRONG><a name="[92]"></a>vPortEnterCritical</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, port.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerIsTimerActive
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskPriorityGet
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMX_SendPacket
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskGetState
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM165XX_Send_addr
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_arg
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_display
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueRemoveFromSet
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueAddToSet
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[93]"></a>vPortExitCritical</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, port.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerIsTimerActive
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskPriorityGet
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMX_SendPacket
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskGetState
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM165XX_Send_addr
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_arg
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_display
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueRemoveFromSet
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueAddToSet
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[13]"></a>SysTick_Handler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SysTick_Handler &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortClearInterruptMask
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskIncrementTick
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[d3]"></a>pvPortMalloc</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, heap_2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationMallocFailedHook
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[d5]"></a>vPortFree</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, heap_2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
</UL>

<P><STRONG><a name="[14d]"></a>xPortGetFreeHeapSize</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, heap_2.o(.text), UNUSED)

<P><STRONG><a name="[14e]"></a>vPortInitialiseBlocks</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heap_2.o(.text), UNUSED)

<P><STRONG><a name="[4d]"></a>Hard_Fault_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Hard_Fault_Handler &rArr; stackDump &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stackDump
</UL>
<BR>[Address Reference Count : 1]<UL><LI> retarget.o(.emb_text)
</UL>
<P><STRONG><a name="[56]"></a>SendChar_ToUART</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, retarget.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>

<P><STRONG><a name="[57]"></a>SendChar</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, retarget.o(.text), UNUSED, KEPT)
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar_ToUART
</UL>

<P><STRONG><a name="[58]"></a>GetChar</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, retarget.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>

<P><STRONG><a name="[59]"></a>kbhit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, retarget.o(.text), UNUSED, KEPT)

<P><STRONG><a name="[5a]"></a>IsDebugFifoEmpty</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, retarget.o(.text), UNUSED, KEPT)

<P><STRONG><a name="[5b]"></a>_ttywrch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, retarget.o(.text), UNUSED, KEPT)
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar_ToUART
</UL>

<P><STRONG><a name="[53]"></a>fputc</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar_ToUART
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf5.o(i.__0printf$5)
</UL>
<P><STRONG><a name="[5c]"></a>fgetc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, retarget.o(.text), UNUSED, KEPT)
<BR><BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetChar
</UL>

<P><STRONG><a name="[5d]"></a>ferror</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, retarget.o(.text), UNUSED, KEPT)

<P><STRONG><a name="[14f]"></a>SYS_ClearResetSrc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sys.o(.text), UNUSED)

<P><STRONG><a name="[150]"></a>SYS_GetBODStatus</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sys.o(.text), UNUSED)

<P><STRONG><a name="[151]"></a>SYS_GetResetSrc</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys.o(.text), UNUSED)

<P><STRONG><a name="[152]"></a>SYS_IsRegLocked</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sys.o(.text), UNUSED)

<P><STRONG><a name="[153]"></a>SYS_ReadPDID</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys.o(.text), UNUSED)

<P><STRONG><a name="[154]"></a>SYS_ResetChip</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sys.o(.text), UNUSED)

<P><STRONG><a name="[155]"></a>SYS_ResetCPU</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sys.o(.text), UNUSED)

<P><STRONG><a name="[7d]"></a>SYS_ResetModule</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, sys.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Init
</UL>

<P><STRONG><a name="[156]"></a>SYS_EnableBOD</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, sys.o(.text), UNUSED)

<P><STRONG><a name="[157]"></a>SYS_DisableBOD</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sys.o(.text), UNUSED)

<P><STRONG><a name="[158]"></a>UART_ClearIntFlag</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[159]"></a>UART_Close</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[15a]"></a>UART_DisableFlowCtrl</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[121]"></a>UART_DisableInt</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>

<P><STRONG><a name="[15b]"></a>UART_EnableFlowCtrl</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[123]"></a>UART_EnableInt</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>

<P><STRONG><a name="[7e]"></a>UART2_Open</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART2_Open &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_switch
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Init
</UL>

<P><STRONG><a name="[79]"></a>UART_Open</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART_Open &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupHardware
</UL>

<P><STRONG><a name="[15c]"></a>UART_Read</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[126]"></a>UART_SetLine_Config</STRONG> (Thumb, 124 bytes, Stack size 56 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
</UL>

<P><STRONG><a name="[15d]"></a>UART_SetTimeoutCnt</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[127]"></a>UART_SelectIrDAMode</STRONG> (Thumb, 130 bytes, Stack size 48 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
</UL>

<P><STRONG><a name="[15e]"></a>UART_SelectRS485Mode</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[15f]"></a>UART_SelectLINMode</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[160]"></a>UART_Write</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[129]"></a>CLK_DisableModuleClock</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, clk.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_DisableCKO
</UL>

<P><STRONG><a name="[128]"></a>CLK_DisableCKO</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, clk.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_DisableModuleClock
</UL>

<P><STRONG><a name="[76]"></a>CLK_SetModuleClock</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, clk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLK_SetModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupHardware
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableCKO
</UL>

<P><STRONG><a name="[77]"></a>CLK_EnableModuleClock</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, clk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupHardware
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableCKO
</UL>

<P><STRONG><a name="[12a]"></a>CLK_EnableCKO</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, clk.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetModuleClock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
</UL>

<P><STRONG><a name="[161]"></a>CLK_PowerDown</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, clk.o(.text), UNUSED)

<P><STRONG><a name="[162]"></a>CLK_Idle</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, clk.o(.text), UNUSED)

<P><STRONG><a name="[163]"></a>CLK_GetHXTFreq</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, clk.o(.text), UNUSED)

<P><STRONG><a name="[164]"></a>CLK_GetLXTFreq</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, clk.o(.text), UNUSED)

<P><STRONG><a name="[12b]"></a>CLK_GetPCLK0Freq</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, clk.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>

<P><STRONG><a name="[12c]"></a>CLK_GetPCLK1Freq</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, clk.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>

<P><STRONG><a name="[12d]"></a>CLK_GetHCLKFreq</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, clk.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>

<P><STRONG><a name="[12e]"></a>CLK_GetCPUFreq</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, clk.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>

<P><STRONG><a name="[73]"></a>CLK_WaitClockReady</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, clk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLK_WaitClockReady
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnablePLL
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupHardware
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
</UL>

<P><STRONG><a name="[74]"></a>CLK_SetHCLK</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, clk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CLK_SetHCLK &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupHardware
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
</UL>

<P><STRONG><a name="[12f]"></a>CLK_DisablePLL</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, clk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnablePLL
</UL>

<P><STRONG><a name="[75]"></a>CLK_EnablePLL</STRONG> (Thumb, 344 bytes, Stack size 40 bytes, clk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CLK_EnablePLL &rArr; CLK_WaitClockReady
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_DisablePLL
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupHardware
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
</UL>

<P><STRONG><a name="[130]"></a>CLK_SetCoreClock</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, clk.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnablePLL
</UL>

<P><STRONG><a name="[165]"></a>CLK_SetSysTickClockSrc</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, clk.o(.text), UNUSED)

<P><STRONG><a name="[72]"></a>CLK_EnableXtalRC</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, clk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupHardware
</UL>

<P><STRONG><a name="[166]"></a>CLK_DisableXtalRC</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, clk.o(.text), UNUSED)

<P><STRONG><a name="[7c]"></a>GPIO_SetMode</STRONG> (Thumb, 44 bytes, Stack size 20 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_SetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>

<P><STRONG><a name="[167]"></a>GPIO_EnableInt</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[168]"></a>GPIO_DisableInt</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[169]"></a>FMC_SetBootSource</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fmc.o(.text), UNUSED)

<P><STRONG><a name="[16a]"></a>FMC_Close</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fmc.o(.text), UNUSED)

<P><STRONG><a name="[16b]"></a>FMC_DisableAPUpdate</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fmc.o(.text), UNUSED)

<P><STRONG><a name="[16c]"></a>FMC_DisableConfigUpdate</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fmc.o(.text), UNUSED)

<P><STRONG><a name="[16d]"></a>FMC_DisableLDUpdate</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fmc.o(.text), UNUSED)

<P><STRONG><a name="[16e]"></a>FMC_EnableAPUpdate</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fmc.o(.text), UNUSED)

<P><STRONG><a name="[16f]"></a>FMC_EnableConfigUpdate</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fmc.o(.text), UNUSED)

<P><STRONG><a name="[170]"></a>FMC_EnableLDUpdate</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fmc.o(.text), UNUSED)

<P><STRONG><a name="[171]"></a>FMC_GetBootSource</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fmc.o(.text), UNUSED)

<P><STRONG><a name="[80]"></a>FMC_Open</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fmc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key1_fuc
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Init
</UL>

<P><STRONG><a name="[172]"></a>FMC_ReadDataFlashBaseAddr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fmc.o(.text), UNUSED)

<P><STRONG><a name="[131]"></a>FMC_ReadConfig</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, fmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Read
</UL>

<P><STRONG><a name="[133]"></a>FMC_WriteConfig</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, fmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Read
</UL>

<P><STRONG><a name="[173]"></a>FMC_EnableFreqOptimizeMode</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, fmc.o(.text), UNUSED)

<P><STRONG><a name="[174]"></a>FMC_DisableFreqOptimizeMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fmc.o(.text), UNUSED)

<P><STRONG><a name="[10a]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[175]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[176]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[d4]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[177]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[178]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[134]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[179]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[17a]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[135]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[f3]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskList
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvListTaskWithinSingleList
</UL>

<P><STRONG><a name="[d6]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[136]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[5f]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[17b]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[138]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[17c]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[137]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[17d]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[17e]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[17f]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[13a]"></a>__0printf$5</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[180]"></a>__1printf$5</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5), UNUSED)

<P><STRONG><a name="[70]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key1_fuc
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_arg
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Init
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hard_Fault_Handler
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stackDump
</UL>

<P><STRONG><a name="[13c]"></a>__0sprintf$5</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printf5.o(i.__0sprintf$5), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[181]"></a>__1sprintf$5</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf5.o(i.__0sprintf$5), UNUSED)

<P><STRONG><a name="[f2]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf5.o(i.__0sprintf$5), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvListTaskWithinSingleList
</UL>

<P><STRONG><a name="[182]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[183]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[184]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[19]"></a>Default_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>ui_display_fuc</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ui_display_fuc &rArr; ui_display &rArr; display_num_string_8x16 &rArr; display_num_8x16 &rArr; lcd_address &rArr; transfer_command
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_display_init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_display
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[6c]"></a>prvSetupHardware</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvSetupHardware &rArr; UART2_Init &rArr; UART2_Open &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Init
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetModuleClock
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableXtalRC
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnablePLL
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e0]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>

<P><STRONG><a name="[51]"></a>prvIdleTask</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvIdleTask &rArr; prvCheckTasksWaitingTermination &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYieldFromISR
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationIdleHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(.text)
</UL>
<P><STRONG><a name="[f1]"></a>prvListTaskWithinSingleList</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskList
</UL>

<P><STRONG><a name="[e9]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[fc]"></a>prvInsertTimerInActiveList</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[100]"></a>prvSampleTimeNow</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[52]"></a>prvTimerTask</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = prvTimerTask &rArr; prvProcessTimerOrBlockTask &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(.text)
</UL>
<P><STRONG><a name="[104]"></a>prvCheckForValidListAndQueue</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[101]"></a>prvSwitchTimerLists</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[103]"></a>prvProcessReceivedCommands</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[102]"></a>prvProcessTimerOrBlockTask</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = prvProcessTimerOrBlockTask &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYieldFromISR
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[109]"></a>prvCopyDataToQueue</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinherit
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
</UL>

<P><STRONG><a name="[10b]"></a>prvNotifyQueueSetContainer</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvNotifyQueueSetContainer &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[10c]"></a>prvUnlockQueue</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[110]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvCopyDataFromQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
</UL>

<P><STRONG><a name="[55]"></a>stackDump</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = stackDump &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hard_Fault_Handler
</UL>

<P><STRONG><a name="[125]"></a>CLK_GetPLLClockFreq</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLK_GetPLLClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Open
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SelectIrDAMode
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetLine_Config
</UL>

<P><STRONG><a name="[124]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EnableInt
</UL>

<P><STRONG><a name="[122]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DisableInt
</UL>

<P><STRONG><a name="[132]"></a>FMC_Read</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fmc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_WriteConfig
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_ReadConfig
</UL>

<P><STRONG><a name="[13b]"></a>_printf_core</STRONG> (Thumb, 654 bytes, Stack size 104 bytes, printf5.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$5
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$5
</UL>

<P><STRONG><a name="[54]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf5.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$5
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf5.o(i.__0sprintf$5)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
