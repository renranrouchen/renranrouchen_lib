C51 COMPILER V9.52.0.0   USR                                                               07/26/2018 17:42:19 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE USR
OBJECT MODULE PLACED IN .\Output\usr.obj
COMPILER INVOKED BY: E:\Keil_v5\C51\BIN\C51.EXE APP\stdriver\usr.c LARGE BROWSE INCDIR(.\driver\inc;.\APP\include) DEBUG
                    - OBJECTEXTEND PRINT(.\list\usr.lst) TABS(2) OBJECT(.\Output\usr.obj)

line level    source

   1          #include "usr.h"
   2          #include "ca51f3sfr.h"
   3          #include "ca51f3xsfr.h"
   4          #include "FD616.H"
   5          #include "delay.h"
   6          #include <math.h>
   7          #include "config.h"
   8          struct DATA_TIME time;
   9          struct DATA_ALARM alarm1,alarm2,alarm3;
  10          
  11          
  12          //float   TEM2,TEM4;
  13          double   TEM,TEM_F; 
  14          unsigned char  ADC_AVG_NUM[3],ADC_Display=0,ADC_Display1=0,ADC_ONE=1;
  15          extern t_fd612_ops fd612_base_ops; 
  16          extern FD612_Struct_DispBuff FD612_base_DispBuff;
  17          bit HalfSecFlag,time1_second;
  18          bit blink_flag,blink2_flag,blink3_flag;
  19          UINT8 dc=0,dc_over_flag=1,key_time_2second,key_time_2count,key_delaytime=4,back_TIME_Flag=0,dc_1second=0,d
             -elaytime_1second=2;
  20          unsigned char SET_Long_Flag=0,SET_Short_Flag=0,UP_Long_Flag=0,UP_Short_Flag=0,DOWN_Short_Flag=0,DOWN_Long_
             -Flag=0;
  21          bit long_flag=0,back_first=1;
  22          UINT8 set_status_flag=0;
  23          unsigned long flag_year_leap=0;
  24          //UINT8 alarm_hour_long_up_down_flag=0,alarm_min_long_up_down_flag=0;
  25          bit adc_first=1;
  26          
  27          UINT8 hour_pm_flag=0,hour_12_24_flag=0,hour_chage_state=0;
  28          //UINT8 alarm1_pm_flag=0,alarm2_pm_flag=0,alarm3_pm_flag=0;
  29          unsigned char flag_display=0,display_flag_hur_min=1,SET_Short_Flag_hur_min=0;
  30          unsigned char display_flag_mon_day=1,SET_Short_Flag_mon_day=0,display_flag_year=1;
  31          //UINT8 switch_2to1_flag=0;
  32          //unsigned char alarm_on_flag=0,alarm1_on_dispaly=0,alarm2_on_dispaly=0,alarm3_on_dispaly=0;
  33          bit key_first=1;
  34          bit  long_add_flag=0,up_down_flag=0;
  35          unsigned char  ADC_TIME_Flag=0;
  36          bit alarm_voice_flag=0;
  37          //unsigned char alarm_flag=0,alarm_voice_flag=0,alarm3_voice_flag=0,alarm2_voice_flag=0,alarm3_flag=0,alar
             -m2_flag=0;
  38          unsigned char  back_voice_Flag=0,alarm_clock_flag=0;
  39          
  40          unsigned char sd_flag=0,sd_select_first=1;
  41          bit sd_mode_flag=0;
  42          unsigned char voice_flag=0,voice_fisrt=1;
  43          unsigned char power_delay_time=0,power_first=0;
  44          unsigned char  SET_Short_Flag_display=0;
  45          bit display_flag_week=1;
  46          
  47          void TIMER0_ISR (void) interrupt 1
  48          {
  49   1          TH0 =0XFf;
  50   1          TL0 =0Xba;
  51   1          buzzer=~buzzer;
C51 COMPILER V9.52.0.0   USR                                                               07/26/2018 17:42:19 PAGE 2   

  52   1      
  53   1      }
  54          
  55          void RTC_ISR (void) interrupt 13   
  56          {
  57   1        if(RTCIF & RTC_MF)      //�����ж�
  58   1        {
  59   2          RTCIF = RTC_MF;     
  60   2        }
  61   1        if(RTCIF & RTC_HF)      //�����ж�
  62   1        {
  63   2          RTCIF = RTC_HF;
  64   2      //    HalfSecFlag = 1;
  65   2          dc++;
  66   2          if(dc==dc_over_flag)
  67   2          {
  68   3          HalfSecFlag = 1;
  69   3          time1_second=1; 
  70   3          alarm_clock_flag=1;     
  71   3          dc=0;     
  72   3          }
  73   2          key_time_2count++;
  74   2          if(key_time_2count==key_delaytime)
  75   2          {
  76   3            key_time_2count=0;
  77   3            key_time_2second=1;
  78   3      //      ADC_TIME_Flag++;
  79   3      //      back_TIME_Flag++;
  80   3      //      back_voice_Flag++;
  81   3          }
  82   2          dc_1second++;
  83   2          if(dc_1second==delaytime_1second)
  84   2          {
  85   3            dc_1second=0;
  86   3             ADC_TIME_Flag++;
  87   3            back_TIME_Flag++;
  88   3            back_voice_Flag++;
  89   3            power_delay_time++;
  90   3          }
  91   2        } 
  92   1      
  93   1      } 
  94          
  95          
  96          const unsigned char  dis[10] = {FD612_DISP_0,FD612_DISP_1,FD612_DISP_2,FD612_DISP_3,FD612_DISP_4,FD612_DIS
             -P_5,FD612_DISP_6,FD612_DISP_7,FD612_DISP_8,FD612_DISP_9 };
  97          /**
  98           *  @brief  BCDתʮ����
  99           *  @param  bcd
 100           *  @return decimal
 101           *  @note    
 102           *  @note    
 103           */
 104          UINT8 bcd_decimal(UINT8 bcd)
 105          {
 106   1      return bcd-(bcd >> 4)*6;
 107   1      }
 108          
 109          /**
 110           *  @brief  ʮ����תBCD
 111           *  @param  decimal
 112           *  @return bcd
C51 COMPILER V9.52.0.0   USR                                                               07/26/2018 17:42:19 PAGE 3   

 113           *  @note    
 114           *  @note    
 115           */
 116          UINT8 decimal_bcd(UINT8 decimal)
 117          {
 118   1      return  (decimal+(decimal / 10)*6);
 119   1      }
 120          
 121          UINT8  leep_year(UINT16  year)
 122          {
 123   1        if((year%400 == 0) || year%4 == 0 && year%100!=0)
 124   1        return 1;
 125   1        else
 126   1        return 0;
 127   1      }
 128          
 129          
 130          void Alarm_display(void)
 131          {
 132   1      //  if(alarm1_on_dispaly||alarm2_on_dispaly||alarm3_on_dispaly)
 133   1      //  {
 134   1      //     if(alarm1_on_dispaly)
 135   1      //     {
 136   1      //        alarm1_sleep( );
 137   1      //     }
 138   1      //       if(alarm2_on_dispaly)
 139   1      //     {
 140   1      //        alarm2_sleep( );
 141   1      //     }
 142   1      //     if(alarm3_on_dispaly)
 143   1      //     {
 144   1      //        alarm3_sleep( );
 145   1      //     } 
 146   1      //  }
 147   1           if(alarm1.alarm_on_dispaly)
 148   1       {
 149   2      
 150   2           alarm_sleep_judge(&alarm1);
 151   2       }
 152   1         if(alarm2.alarm_on_dispaly)
 153   1       {
 154   2      
 155   2         alarm_sleep_judge(&alarm2);
 156   2       }
 157   1         if(alarm3.alarm_on_dispaly)
 158   1       {
 159   2      
 160   2         alarm_sleep_judge(&alarm3);
 161   2       }
 162   1      }
 163          
 164          
 165          void key_statue(void)
 166          {
 167   1        from_ds1302_read_time_data();
 168   1      
 169   1      if(alarm1.alarm_flag==0 && alarm2.alarm_flag==0&& alarm3.alarm_flag==0){
 170   2            if(SET==0)
 171   2            {
 172   3                        
 173   3              key_into_init( );
 174   3              while(!SET)
C51 COMPILER V9.52.0.0   USR                                                               07/26/2018 17:42:19 PAGE 4   

 175   3              {
 176   4      //          if(SET_Long_Flag==0&&set_status_flag !=2) 
 177   4                if(SET_Short_Flag_display==0||SET_Short_Flag_display==1||SET_Short_Flag_display==2)
 178   4                {
 179   5                 if(HalfSecFlag)
 180   5                  {
 181   6                    if(blink_flag)    
 182   6                    {
 183   7                      blink_flag=0;                           
 184   7                      FD616_DispBuff.DispData[14] &= ~(1<<4);
 185   7                      if(hour_pm_flag)  FD616_DispBuff.DispData[14] |= 1<<3;
 186   7                      if(alarm1.alarm_on_dispaly||alarm2.alarm_on_dispaly||alarm3.alarm_on_dispaly)       FD616_DispBuff.Di
             -spData[14] |= 1<<6;
 187   7                      FD616_Refresh();      
 188   7                    }
 189   6                    else 
 190   6                    {
 191   7                        blink_flag=1; 
 192   7                        FD616_DispBuff.DispData[14] |= 1<<4;
 193   7                                            
 194   7                    }
 195   6                    if(hour_pm_flag)  FD616_DispBuff.DispData[14] |= 1<<3;
 196   6                    if(alarm1.alarm_on_dispaly||alarm2.alarm_on_dispaly||alarm3.alarm_on_dispaly)       FD616_DispBuff.Dis
             -pData[14] |= 1<<6;
 197   6                    FD616_Refresh();
 198   6                    HalfSecFlag=0;  
 199   6                  } 
 200   5                          
 201   5                }
 202   4                //
 203   4      
 204   4                key_display_up_down( );
 205   4                if(key_time_2second==1)
 206   4                {
 207   5                  long_flag=1;
 208   5                  SET_Long_Flag=1;
 209   5                  SET_Short_Flag_display=0;
 210   5                  display_flag_year=0;
 211   5                  display_flag_hur_min=1;
 212   5                  display_flag_mon_day=1;
 213   5                  display_flag_week=1;
 214   5                  
 215   5                  set_time_year_blink(0);
 216   5                  display_all();
 217   5                }
 218   4              }       
 219   3              key_time_2second=0;
 220   3              while(!SET);
 221   3              if(long_flag==0)
 222   3              {
 223   4                SET_Short_Flag=1;
 224   4                key_time_2second=0;
 225   4              }
 226   3            }//set
 227   2        if(UP==0)
 228   2        {
 229   3          key_into_init( );
 230   3          while(!UP)
 231   3          {
 232   4            
 233   4           key_display_up_down( );
 234   4            if(key_time_2second==1)
C51 COMPILER V9.52.0.0   USR                                                               07/26/2018 17:42:19 PAGE 5   

 235   4            {
 236   5              //TR0=0;
 237   5              long_flag=1;
 238   5              UP_Long_Flag=1;     
 239   5              long_add_flag=1;//?????
 240   5              if(SET_Long_Flag==1)
 241   5              {
 242   6                switch(SET_Short_Flag_display)
 243   6                  {
 244   7                    case 0:
 245   7                    {
 246   8                      year_long_up_down(0);
 247   8                      break;        
 248   8      
 249   8              
 250   8                    }
 251   7                    case 1:
 252   7                    {
 253   8                      mon_long_up_down(0);
 254   8                      break;        
 255   8      
 256   8              
 257   8                    }
 258   7                    case 2:
 259   7                    {
 260   8                      mday_long_up_down(0);       
 261   8                      break;        
 262   8      
 263   8              
 264   8                    }
 265   7      //              case 3:
 266   7      //              {
 267   7      //              
 268   7      //                break;        
 269   7      
 270   7      //        
 271   7      //              }
 272   7                    case 4:
 273   7                    {
 274   8                      hour_long_up_down(0);
 275   8                      break;        
 276   8      
 277   8              
 278   8                    }
 279   7                    case 5:
 280   7                    {
 281   8                      min_long_up_down(0) ;
 282   8                      break;        
 283   8      
 284   8              
 285   8                    }
 286   7      //              case 6:
 287   7      //              {
 288   7      //                
 289   7      //                
 290   7      //                break;        
 291   7      
 292   7      //        
 293   7      //              }
 294   7                    case 7:
 295   7                    {
 296   8                      alarm_hour_up_down(1,0,&alarm1);
C51 COMPILER V9.52.0.0   USR                                                               07/26/2018 17:42:19 PAGE 6   

 297   8                  
 298   8      //                alarm_hour_long_up_down(1,1,alarm1);
 299   8                      break;        
 300   8      
 301   8              
 302   8                    }
 303   7                    case 8:
 304   7                    {
 305   8                      alarm_min_up_down(1,0,&alarm1);
 306   8      //                alarm_min_long_up_down(1,1,alarm1);
 307   8                      break;        
 308   8      
 309   8              
 310   8                    }             
 311   7      //              case 9:
 312   7      //              {
 313   7      //                
 314   7      //                break;        
 315   7      
 316   7      //        
 317   7      //              }
 318   7                    case 10:
 319   7                    {
 320   8                      alarm_hour_up_down(1,0,&alarm2);
 321   8                    
 322   8      //              alarm_hour_long_up_down(2,1, alarm2);
 323   8                      break;        
 324   8      
 325   8              
 326   8                    } 
 327   7                    case 11:
 328   7                    {
 329   8      //              alarm_min_long_up_down(2,1,alarm2);
 330   8                      alarm_min_up_down(1,0,&alarm2);
 331   8                      break;        
 332   8      
 333   8              
 334   8                    }
 335   7      //              case 12:
 336   7      //              {
 337   7      //                
 338   7      //                break;        
 339   7      
 340   7      //        
 341   7      //              }
 342   7                    case 13:
 343   7                    {
 344   8                      alarm_hour_up_down(1,0,&alarm3);
 345   8                    
 346   8      //                alarm_hour_long_up_down(3,1, alarm3);
 347   8                      break;        
 348   8      
 349   8              
 350   8                    } 
 351   7                    case 14:
 352   7                    {
 353   8      //                alarm_min_long_up_down(3,1, alarm3);
 354   8                      alarm_min_up_down(1,0,&alarm3);
 355   8                      break;        
 356   8      
 357   8              
 358   8                    }
C51 COMPILER V9.52.0.0   USR                                                               07/26/2018 17:42:19 PAGE 7   

 359   7                      default:
 360   7                      {
 361   8      
 362   8                        break;
 363   8                      }
 364   7                  }
 365   6              }
 366   5              
 367   5            } 
 368   4          }
 369   3      /*����ALARM�Լ��Լ�ʱ��Ӽ�һ */ 
 370   3      //    switch(alarm_hour_long_up_down_flag)
 371   3      //    {
 372   3      //      case 1:
 373   3      //      {
 374   3      //        alarm1.hour--;
 375   3      //        if(hour_12_24_flag)
 376   3      //        {
 377   3      //          if(alarm1.hour==0)alarm1.hour=12;
 378   3      //        }
 379   3      //        else 
 380   3      //        {
 381   3      //          if(alarm1.hour>=24)alarm1.hour=23;
 382   3      //        }
 383   3      //        alarm_hour_long_up_down_flag=0;       
 384   3      //        break;
 385   3      //      }
 386   3      //      case 2:
 387   3      //      {
 388   3      //        alarm2.hour--;
 389   3      //        if(hour_12_24_flag)
 390   3      //        {
 391   3      //          if(alarm2.hour==0)alarm2.hour=12;
 392   3      //        }
 393   3      //        else 
 394   3      //        {
 395   3      //          if(alarm2.hour>=24)alarm2.hour=23;
 396   3      //        }       
 397   3      //        alarm_hour_long_up_down_flag=0;       
 398   3      //        break;
 399   3      //      }     
 400   3      //      case 3:
 401   3      //      {
 402   3      //        alarm3.hour--;
 403   3      //         if(hour_12_24_flag)
 404   3      //        {
 405   3      //          if(alarm3.hour==0)alarm3.hour=12;
 406   3      //        }
 407   3      //        else 
 408   3      //        {
 409   3      //          if(alarm3.hour>=24)alarm3.hour=23;
 410   3      //        }
 411   3      //        alarm_hour_long_up_down_flag=0;       
 412   3      //        break;
 413   3      //      }     
 414   3      //    
 415   3      //      default :
 416   3      //      break;      
 417   3      //    }
 418   3      //    switch(alarm_min_long_up_down_flag)
 419   3      //    {
 420   3      //      case 1:
C51 COMPILER V9.52.0.0   USR                                                               07/26/2018 17:42:19 PAGE 8   

 421   3      //      {
 422   3      //        alarm1.minute--;
 423   3      //          if(alarm1.minute>=60)alarm1.minute=59;
 424   3      //      
 425   3      //        alarm_min_long_up_down_flag=0;        
 426   3      //        break;
 427   3      //      }
 428   3      //      case 2:
 429   3      //      {
 430   3      //        alarm2.minute--;
 431   3      //        if(alarm2.minute>=60)alarm2.minute=59;
 432   3      //        alarm_min_long_up_down_flag=0;        
 433   3      //        break;
 434   3      //      }     
 435   3      //      case 3:
 436   3      //      {
 437   3      //        alarm3.minute--;
 438   3      //        if(alarm3.minute>=60)alarm3.minute=59;
 439   3      //        alarm_min_long_up_down_flag=0;        
 440   3      //        break;
 441   3      //      }     
 442   3      //      
 443   3      //      default :
 444   3      //      break;      
 445   3      //    }   
 446   3            long_add_flag=0;
 447   3            key_time_2second=0; 
 448   3          while(!UP);
 449   3          if(long_flag==0)
 450   3          {
 451   4            UP_Short_Flag=1;
 452   4            key_time_2second=0;
 453   4          }
 454   3          }
 455   2      
 456   2      
 457   2              //down??
 458   2          if(DOWN==0)
 459   2          {
 460   3            key_into_init( );
 461   3            while(!DOWN)
 462   3            {
 463   4                key_display_up_down( );
 464   4                if(key_time_2second==1) 
 465   4                {
 466   5                  long_add_flag=1;
 467   5                  TR0=0;
 468   5                  long_flag=1;
 469   5                  DOWN_Long_Flag=1;
 470   5                  
 471   5                  if(SET_Long_Flag==1)
 472   5                  {
 473   6                switch(SET_Short_Flag_display)
 474   6                  {
 475   7                    case 0:
 476   7                    {
 477   8                      year_long_up_down(1);
 478   8                      break;        
 479   8      
 480   8              
 481   8                    }
 482   7                    case 1:
C51 COMPILER V9.52.0.0   USR                                                               07/26/2018 17:42:19 PAGE 9   

 483   7                    {
 484   8                      mon_long_up_down(1);
 485   8                      break;        
 486   8      
 487   8              
 488   8                    }
 489   7                    case 2:
 490   7                    {
 491   8                      mday_long_up_down(1);       
 492   8                      break;        
 493   8      
 494   8              
 495   8                    }
 496   7      //              case 3:
 497   7      //              {
 498   7      //              
 499   7      //                break;        
 500   7      
 501   7      //        
 502   7      //              }
 503   7                    case 4:
 504   7                    {
 505   8                      hour_long_up_down(1);
 506   8                      break;        
 507   8      
 508   8              
 509   8                    }
 510   7                    case 5:
 511   7                    {
 512   8                      min_long_up_down(1) ;
 513   8                      break;        
 514   8      
 515   8              
 516   8                    }
 517   7      //              case 6:
 518   7      //              {
 519   7      //                
 520   7      //                
 521   7      //                break;        
 522   7      
 523   7      //        
 524   7      //              }
 525   7                    case 7:
 526   7                    {
 527   8                      alarm_hour_up_down(1,1,&alarm1);
 528   8      //                alarm_hour_long_up_down(1,2,alarm1);
 529   8                      break;        
 530   8      
 531   8              
 532   8                    }
 533   7                    case 8:
 534   7                    {
 535   8                      alarm_min_up_down(1,1,&alarm1);
 536   8      //                alarm_min_long_up_down(1,2,alarm1);
 537   8                      break;        
 538   8      
 539   8              
 540   8                    }             
 541   7      //              case 9:
 542   7      //              {
 543   7      //                
 544   7      //                break;        
C51 COMPILER V9.52.0.0   USR                                                               07/26/2018 17:42:19 PAGE 10  

 545   7      
 546   7      //        
 547   7      //              }
 548   7                    case 10:
 549   7                    {
 550   8                      alarm_hour_up_down(1,1,&alarm2);
 551   8      //              alarm_hour_long_up_down(2,2, alarm2);
 552   8                      break;        
 553   8      
 554   8              
 555   8                    } 
 556   7                    case 11:
 557   7                    {
 558   8                      alarm_min_up_down(1,1,&alarm2);
 559   8      //              alarm_min_long_up_down(2,2,alarm2);
 560   8                      break;        
 561   8      
 562   8              
 563   8                    }
 564   7      //              case 12:
 565   7      //              {
 566   7      //                
 567   7      //                break;        
 568   7      
 569   7      //        
 570   7      //              }
 571   7                    case 13:
 572   7                    {
 573   8                      alarm_hour_up_down(1,1,&alarm3);
 574   8      //                alarm_hour_long_up_down(3,2, alarm3);
 575   8                      break;        
 576   8      
 577   8              
 578   8                    } 
 579   7                    case 14:
 580   7                    {
 581   8                      alarm_min_up_down(1,1,&alarm3);
 582   8      //                alarm_min_long_up_down(3,2, alarm3);
 583   8                      break;        
 584   8      
 585   8              
 586   8                    }
 587   7                      default:
 588   7                      {
 589   8      
 590   8                        break;
 591   8                      }
 592   7                  }
 593   6                  }
 594   5                  else 
 595   5                  {
 596   6                    if( ADC_ONE==1)
 597   6                    {
 598   7                      if(ADC_Display==0)ADC_Display=1;
 599   7                      else ADC_Display=0;
 600   7                      switch (ADC_Display)
 601   7                       {
 602   8                         case 0:
 603   8                         {
 604   9                            FD612_PotiveTNage(FD612_DIG9_ADDR,dis[(unsigned char)TEM/10], &FD612_base_DispBuff);
 605   9                            FD612_PotiveTNage(FD612_DIG10_ADDR,dis[(unsigned char)TEM%10], &FD612_base_DispBuff); 
 606   9                            FD612_PotiveTNage(FD612_DIG11_ADDR,FD612_DISP_cc, &FD612_base_DispBuff);
C51 COMPILER V9.52.0.0   USR                                                               07/26/2018 17:42:19 PAGE 11  

 607   9                            FD612_base_DispBuff.DispData[FD612_DIG8_ADDR] |= 1<<6;
 608   9                            FD612_Base_Refresh(&FD612_base_DispBuff,&fd612_base_ops);
 609   9                            ADC_Display1=0;
 610   9                           break;
 611   9                         }
 612   8                          
 613   8      
 614   8                          case 1:
 615   8                          {
 616   9                            ADC_AVG_NUM[2]   = (unsigned char)TEM_F/100;
 617   9                            ADC_AVG_NUM[1]   = ((unsigned char)TEM_F-ADC_AVG_NUM[2]*100 )/10;
 618   9                            ADC_AVG_NUM[0]   = ((unsigned char)TEM_F-ADC_AVG_NUM[2]*100 )%10;         
 619   9                            FD612_PotiveTNage(FD612_DIG9_ADDR,dis[ADC_AVG_NUM[2]], &FD612_base_DispBuff);
 620   9                            FD612_PotiveTNage(FD612_DIG10_ADDR,dis[ADC_AVG_NUM[1]], &FD612_base_DispBuff);  
 621   9                            FD612_PotiveTNage(FD612_DIG11_ADDR,dis[ADC_AVG_NUM[0]], &FD612_base_DispBuff);
 622   9                            FD612_Base_Refresh(&FD612_base_DispBuff,&fd612_base_ops);
 623   9                            ADC_Display1=1;
 624   9            //                ADC_Display=0;
 625   9                            break;
 626   9                          } 
 627   8                            default :
 628   8                            break;
 629   8                      }
 630   7                      ADC_ONE=0;
 631   7                    }             
 632   6                  }
 633   5                }
 634   4            }
 635   3            
 636   3      //    switch(alarm_hour_long_up_down_flag)
 637   3      //    {
 638   3      //      case 4:
 639   3      //      {
 640   3      //        alarm1.hour++;
 641   3      //        if(hour_12_24_flag)
 642   3      //        {
 643   3      //          if(alarm1.hour==13)alarm1.hour=1;
 644   3      //        }
 645   3      //        else 
 646   3      //        {
 647   3      //          if(alarm1.hour>=24)alarm1.hour=0;
 648   3      //        }       
 649   3      //        alarm_hour_long_up_down_flag=0;       
 650   3      //        break;
 651   3      //      }     
 652   3      //      case 5:
 653   3      //      {
 654   3      //        alarm2.hour++;
 655   3      //        if(hour_12_24_flag)
 656   3      //        {
 657   3      //          if(alarm2.hour==13)alarm2.hour=1;
 658   3      //        }
 659   3      //        else 
 660   3      //        {
 661   3      //          if(alarm2.hour>=24)alarm2.hour=0;
 662   3      //        }       
 663   3      //        alarm_hour_long_up_down_flag=0;       
 664   3      //        break;
 665   3      //      }
 666   3      //      case 6:
 667   3      //      {
 668   3      //        alarm3.hour++;
C51 COMPILER V9.52.0.0   USR                                                               07/26/2018 17:42:19 PAGE 12  

 669   3      //        if(hour_12_24_flag)
 670   3      //        {
 671   3      //          if(alarm3.hour==13)alarm3.hour=1;
 672   3      //        }
 673   3      //        else 
 674   3      //        {
 675   3      //          if(alarm3.hour>=24)alarm3.hour=0;
 676   3      //        }         
 677   3      //        alarm_hour_long_up_down_flag=0;       
 678   3      //        break;
 679   3      //      }
 680   3      //      default :
 681   3      //      break;      
 682   3      //    }
 683   3      //    switch(alarm_min_long_up_down_flag)
 684   3      //    {
 685   3      //      case 4:
 686   3      //      {
 687   3      //        alarm1.minute++;
 688   3      //        if(alarm1.minute==60)alarm1.minute=0;
 689   3      //        alarm_min_long_up_down_flag=0;        
 690   3      //        break;
 691   3      //      }     
 692   3      //      case 5:
 693   3      //      {
 694   3      //        alarm2.minute++;
 695   3      //        if(alarm2.minute==60)alarm2.minute=0;
 696   3      //        alarm_min_long_up_down_flag=0;        
 697   3      //        break;
 698   3      //      }
 699   3      //      case 6:
 700   3      //      {
 701   3      //        alarm3.minute++;
 702   3      //        if(alarm3.minute==60)alarm3.minute=0;
 703   3      //        alarm_min_long_up_down_flag=0;        
 704   3      //        break;
 705   3      //      }     
 706   3      //      default :
 707   3      //      break;      
 708   3      //    }   
 709   3                ADC_ONE=1;
 710   3                long_add_flag=0;    
 711   3                key_time_2second=0;
 712   3                while(!DOWN);
 713   3              if(long_flag==0)
 714   3              {
 715   4                DOWN_Short_Flag=1;
 716   4                key_time_2second=0;
 717   4              }
 718   3          }
 719   2          //��λ����
 720   2              if(RESET1==0)
 721   2              {
 722   3                  TR0=1;
 723   3                  Delay_ms(70);
 724   3                  TR0=0;
 725   3                  buzzer=0;
 726   3                  InitDS1302( );
 727   3                  FD616_DispBuff.DispState=FD616_INTENS3;
 728   3                  FD616_Command(FD616_DispBuff.DispState);
 729   3                  FD612_base_DispBuff.DispState=FD612_DISP_ON|FD612_INTENS3;
 730   3                  FD612_Command(&fd612_base_ops,FD612_base_DispBuff.DispState); 
C51 COMPILER V9.52.0.0   USR                                                               07/26/2018 17:42:19 PAGE 13  

 731   3                
 732   3      //            display_all();
 733   3                  while(!RESET1);
 734   3              }
 735   2          
 736   2        }
 737   1      //      if(alarm_flag==1)
 738   1      //    {
 739   1      //      if(SET==0||UP==0||DOWN==0)
 740   1      //      {
 741   1      //        alarm_flag=0;
 742   1      //    //    PWM_CTRL &= ~(1<<3);
 743   1      //        alarm_voice_flag=0;   
 744   1      //        buzzer=0;
 745   1      //      }
 746   1      //    }
 747   1      //    if(alarm2_flag==1)
 748   1      //    {
 749   1      //      if(SET==0||UP==0||DOWN==0)
 750   1      //      {
 751   1      //        alarm2_flag=0;
 752   1      //    //    PWM_CTRL &= ~(1<<3);
 753   1      //        alarm2_voice_flag=0;
 754   1      //        buzzer=0;
 755   1      //      }
 756   1      //    }
 757   1      //    if(alarm3_flag==1)
 758   1      //    {
 759   1      //      if(SET==0||UP==0||DOWN==0)
 760   1      //      {
 761   1      //        alarm3_flag=0;
 762   1      //    //    PWM_CTRL &= ~(1<<3);
 763   1      //        alarm3_voice_flag=0;  
 764   1      //        buzzer=0;
 765   1      //      }
 766   1      //    }
 767   1      key_off_alarm_clock(&alarm1);
 768   1      key_off_alarm_clock(&alarm2);
 769   1      key_off_alarm_clock(&alarm3);
 770   1      
 771   1      }
 772          
 773          
 774          
 775          void display(void)
 776          {
 777   1      
 778   1          from_ds1302_read_time_data();
 779   1          display_all();
 780   1            
 781   1            if(SET_Long_Flag)
 782   1            {
 783   2                if(key_first)
 784   2                {
 785   3                    key_first=0;
 786   3                    UP_Short_Flag=0;
 787   3                    DOWN_Short_Flag = 0;
 788   3                }
 789   2      //  
 790   2      
 791   2                if(SET_Short_Flag)
 792   2                {
C51 COMPILER V9.52.0.0   USR                                                               07/26/2018 17:42:19 PAGE 14  

 793   3                  SET_Short_Flag_display++;
 794   3                  SET_Short_Flag=0;
 795   3                
 796   3                  if(SET_Short_Flag_display>15)
 797   3                  {
 798   4                    SET_Short_Flag_display=0;
 799   4                  }
 800   3                }
 801   2                  
 802   2                  switch(SET_Short_Flag_display)
 803   2                  {
 804   3                    case 0:
 805   3                    {
 806   4      //                display_flag_mon_day=1;
 807   4                      display_flag_year=0;
 808   4                      set_time_year_blink(0 );  
 809   4                      if(UP_Short_Flag == 1)
 810   4                      {
 811   5                          time.year++;  
 812   5                          if(time.year>99)time.year=0;
 813   5                          UP_Short_Flag = 0;
 814   5                      }
 815   4                      if(DOWN_Short_Flag == 1)
 816   4                      {
 817   5                          time.year--;
 818   5                        if(time.year==255)time.year=99;
 819   5                          DOWN_Short_Flag = 0;
 820   5                      } 
 821   4                      time.year= decimal_bcd(time.year);
 822   4                      Write_addr_byte_ds1302(year_w_addr,time.year);                
 823   4                      break;                
 824   4                    }
 825   3                    case 1:
 826   3                    {
 827   4                      display_flag_mon_day=0;
 828   4                      display_flag_year=1;
 829   4                      
 830   4                    
 831   4                      set_time_mon_blink(0);
 832   4                      if(UP_Short_Flag == 1)
 833   4                      {
 834   5                          time.month++;
 835   5                          mon_over_judge();
 836   5                          UP_Short_Flag = 0;
 837   5                      }
 838   4                      if(DOWN_Short_Flag == 1)
 839   4                      {
 840   5                          time.month--;
 841   5                          
 842   5                          mon_over_judge();
 843   5                          DOWN_Short_Flag = 0;
 844   5                      } 
 845   4                      time.month = decimal_bcd(time.month);
 846   4                      Write_addr_byte_ds1302(mon_w_addr,time.month);        
 847   4                      break;                
 848   4                    }
 849   3                    case 2:
 850   3                    {
 851   4                      display_flag_mon_day=0;
 852   4                      display_flag_year=1;                    
 853   4                      set_time_day_blink(0);
 854   4                      if(UP_Short_Flag >= 1)
C51 COMPILER V9.52.0.0   USR                                                               07/26/2018 17:42:19 PAGE 15  

 855   4                      {
 856   5                          time.mday++;
 857   5                            mday_over_judge( ) ;                   
 858   5                          UP_Short_Flag = 0;            
 859   5                      } 
 860   4                      if(DOWN_Short_Flag >= 1)
 861   4                      {
 862   5                          time.mday--;
 863   5                          mday_over_judge( ) ;
 864   5                          DOWN_Short_Flag = 0;
 865   5                      }         
 866   4                      time.mday = decimal_bcd(time.mday);
 867   4                      Write_addr_byte_ds1302(day_w_addr,time.mday);                       
 868   4                      break;                
 869   4                    }
 870   3                    case 3:
 871   3                    {
 872   4                      time.hour=Read_addr_byte_ds1302(hour_r_addr);
 873   4                      time.minute=Read_addr_byte_ds1302(min_r_addr);
 874   4      
 875   4                      if(hour_12_24_flag==1)
 876   4                      {
 877   5                          time.hour<<=3;
 878   5                          time.hour>>=3;
 879   5                          time.hour &=~(1<<7);
 880   5                          time.hour &=~(1<<5);
 881   5                      }
 882   4                      time.hour = bcd_decimal(time.hour);
 883   4                      time.minute = bcd_decimal(time.minute);          
 884   4                      display_flag_hur_min=0;
 885   4                      display_flag_mon_day=1;               
 886   4                      display_12_24_blink(0); 
 887   4                      if(UP_Short_Flag==1)
 888   4                      {
 889   5                          if(hour_12_24_flag)
 890   5                          {//12/24
 891   6                           
 892   6                            hour_12_24_flag=0;
 893   6                            hour_chage_input(hour_12_24_flag);
 894   6                            alarm_12switch24(&alarm1);
 895   6                            alarm_12switch24(&alarm2);
 896   6                            alarm_12switch24(&alarm3);
 897   6                                                  
 898   6      
 899   6                          }
 900   5                          else  
 901   5                          {//24/12
 902   6                            hour_12_24_flag=1;
 903   6                            hour_chage_input(hour_12_24_flag);
 904   6                            alarm_24switch12(&alarm1);  
 905   6                            alarm_24switch12(&alarm2);
 906   6                            alarm_24switch12(&alarm3);
 907   6                            
 908   6      
 909   6                              
 910   6                                
 911   6                          }
 912   5                          UP_Short_Flag=0;
 913   5                      
 914   5      
 915   5                          
 916   5                    }               
C51 COMPILER V9.52.0.0   USR                                                               07/26/2018 17:42:19 PAGE 16  

 917   4                      break;                
 918   4                    }
 919   3                    case 4:
 920   3                    {
 921   4                      display_flag_hur_min=0;
 922   4                      if(hour_12_24_flag==1)
 923   4                      {
 924   5                        time.hour<<=3;
 925   5                        time.hour>>=3;
 926   5                        time.hour &=~(1<<7);
 927   5                        time.hour &=~(1<<5);
 928   5                      }
 929   4                      set_time_hour_blink(0);
 930   4                      if(UP_Short_Flag==1)
 931   4                      {                   
 932   5                          time.hour++;
 933   5      
 934   5                          hour_over_judge(0);
 935   5                          UP_Short_Flag=0;
 936   5                      }
 937   4                        if(DOWN_Short_Flag == 1)
 938   4                      {
 939   5                          time.hour--;  
 940   5                          hour_over_judge(1);               
 941   5      
 942   5                          DOWN_Short_Flag = 0;
 943   5                      }
 944   4      
 945   4                    
 946   4                      break;                
 947   4                    }
 948   3                    case 5:
 949   3                    {
 950   4                      display_flag_hur_min=0;
 951   4                      set_time_minute_blink(  0);
 952   4                      if(UP_Short_Flag == 1)
 953   4                      {
 954   5                          time.minute++;
 955   5                          min_over_judge(0);
 956   5                          UP_Short_Flag = 0;
 957   5                        
 958   5                      }
 959   4                      if(DOWN_Short_Flag == 1)
 960   4                      {
 961   5                          time.minute--;
 962   5                          min_over_judge(1);
 963   5                          DOWN_Short_Flag = 0;
 964   5                                              
 965   5      
 966   5                      }
 967   4                    
 968   4                      break;                
 969   4                    }
 970   3                    case 6:
 971   3                    {
 972   4      
 973   4      
 974   4                      
 975   4                      display_flag_week=0;
 976   4                      display_flag_hur_min=0;
 977   4                      alarm_on_off_set(1,&alarm1 );
 978   4                                      
C51 COMPILER V9.52.0.0   USR                                                               07/26/2018 17:42:19 PAGE 17  

 979   4                      
 980   4                      break;                
 981   4                    }
 982   3                    case 7:
 983   3                    {
 984   4                      alarm_hour_set(&alarm1);
 985   4                    
 986   4                      break;                
 987   4                    }
 988   3                    case 8:
 989   3                    {
 990   4                      alarm_min_set(&alarm1);
 991   4                      
 992   4                      break;                
 993   4                    }
 994   3                    case 9:
 995   3                    {
 996   4                      display_flag_week=0;
 997   4                      display_flag_hur_min=0;
 998   4                      alarm_on_off_set(2,&alarm2 );
 999   4      
1000   4                    
1001   4                      break;                
1002   4                    }
1003   3                    case 10:
1004   3                    {
1005   4                      alarm_hour_set(&alarm2);
1006   4                      break;                
1007   4                    } 
1008   3                    case 11:
1009   3                    {
1010   4                      alarm_min_set(&alarm2);
1011   4                        
1012   4                      break;                
1013   4                    }
1014   3                    case 12:
1015   3                    {
1016   4                      display_flag_week=0;
1017   4                      display_flag_hur_min=0;
1018   4                      alarm_on_off_set(3,&alarm3 );
1019   4                      
1020   4                      break;                
1021   4                    }
1022   3                    case 13:
1023   3                    {
1024   4                      alarm_hour_set(&alarm3);
1025   4      
1026   4                      break;                
1027   4                    } 
1028   3                    case 14:
1029   3                    {
1030   4                      alarm_min_set(&alarm3);
1031   4      
1032   4                      break;                
1033   4                    }
1034   3                      default:
1035   3                      {
1036   4                        SET_Short_Flag_display=0;
1037   4                        SET_Long_Flag=0;
1038   4                        display_flag_mon_day=1;
1039   4                        display_flag_hur_min=1;       
1040   4                        display_flag_year=1;
C51 COMPILER V9.52.0.0   USR                                                               07/26/2018 17:42:19 PAGE 18  

1041   4                        display_flag_week=1;
1042   4                        break;
1043   4                      }
1044   3                  }
1045   2                    if(back_TIME_Flag==over_time)
1046   2                  {
1047   3                    display_flag_mon_day=1;
1048   3                    display_flag_hur_min=1;       
1049   3                    display_flag_year=1;
1050   3                    display_flag_week=1;
1051   3                    SET_Long_Flag=0;
1052   3                    back_TIME_Flag=0;
1053   3                    back_first=1;
1054   3                    key_first=1;
1055   3                    SET_Short_Flag_display=0;                                         
1056   3                  }         
1057   2                                
1058   2            } //set_long_flag
1059   1            
1060   1      }
1061          
1062          void alarm_time_init(void)
1063          {
1064   1          alarm1.hour  =12;
1065   1          alarm1.minute=0;
1066   1          alarm1.alarm_pm_flag=0;
1067   1          alarm1.alarm_on_dispaly=0;
1068   1          alarm1.alarm_flag=0;
1069   1          alarm2.hour  =12;
1070   1          alarm2.minute=0;
1071   1          alarm2.alarm_pm_flag=0;
1072   1          alarm2.alarm_on_dispaly=0;
1073   1          alarm2.alarm_flag=0;
1074   1          alarm3.hour  =12;
1075   1          alarm3.minute=0;
1076   1          alarm3.alarm_pm_flag=0;
1077   1          alarm3.alarm_on_dispaly=0;
1078   1          alarm3.alarm_flag=0;
1079   1      //    buzzer=0;
1080   1      }
1081          
1082          
1083          void key_into_init(void)
1084          {
1085   1          long_flag=0;
1086   1          back_first=1;
1087   1      
1088   1          key_time_2second=0;
1089   1          key_time_2count=0;
1090   1      
1091   1      
1092   1          back_TIME_Flag=0;
1093   1      
1094   1          TR0=1;
1095   1          Delay_ms(70);
1096   1          TR0=0;
1097   1          buzzer=0;
1098   1      
1099   1      
1100   1      //    back_voice_Flag=0; //���ѹ�����ʱ���¼���
1101   1      
1102   1      }
C51 COMPILER V9.52.0.0   USR                                                               07/26/2018 17:42:19 PAGE 19  

1103          
1104          void  display_12_24_blink(UINT8 i)
1105          {           
1106   1            if(time1_second==1)
1107   1            {
1108   2      
1109   2                if(blink2_flag)   
1110   2              {
1111   3                  blink2_flag=0;    
1112   3                if(hour_12_24_flag)
1113   3                {
1114   4      
1115   4                    anode_display(FD616_DIG4_ADDR,dis[1]);
1116   4                    anode_display(FD616_DIG5_ADDR,dis[2]);
1117   4        
1118   4                }
1119   3                else
1120   3                {
1121   4      
1122   4                    anode_display(FD616_DIG4_ADDR,dis[2]);
1123   4                    anode_display(FD616_DIG5_ADDR,dis[4]);
1124   4                }
1125   3                    anode_display(FD616_DIG6_ADDR,FD612_DISP_H);
1126   3                    anode_display(FD616_DIG7_ADDR,FD612_DISP_);
1127   3                    FD616_Refresh();
1128   3      
1129   3                
1130   3              }
1131   2              else 
1132   2              {
1133   3                  blink2_flag=1;                            
1134   3                    if(i==0)
1135   3                    {
1136   4                    anode_display(FD616_DIG4_ADDR,0x00);
1137   4                    anode_display(FD616_DIG5_ADDR,0x00);
1138   4                    anode_display(FD616_DIG6_ADDR,0x00);
1139   4                    anode_display(FD616_DIG7_ADDR,0x00);
1140   4                    FD616_Refresh();
1141   4                    }
1142   3              }     
1143   2              time1_second=0;
1144   2            } 
1145   1      }
1146          
1147          
1148          void set_time_year_blink(UINT8 i)
1149          {
1150   1            if(time1_second==1)
1151   1            {
1152   2      
1153   2            if(blink3_flag)
1154   2            {
1155   3              blink3_flag=0;
1156   3      
1157   3              
1158   3                FD612_PotiveTNage(FD612_DIG1_ADDR,dis[2], &FD612_base_DispBuff);
1159   3                FD612_PotiveTNage(FD612_DIG2_ADDR,dis[0], &FD612_base_DispBuff);  
1160   3                FD612_PotiveTNage(FD612_DIG3_ADDR,dis[time.year/10], &FD612_base_DispBuff); 
1161   3                FD612_PotiveTNage(FD612_DIG4_ADDR,dis[time.year%10], &FD612_base_DispBuff);
1162   3                FD612_Base_Refresh(&FD612_base_DispBuff,&fd612_base_ops);
1163   3            }
1164   2            else
C51 COMPILER V9.52.0.0   USR                                                               07/26/2018 17:42:19 PAGE 20  

1165   2            {
1166   3              blink3_flag=1;
1167   3              if(i==0){
1168   4              FD612_PotiveTNage(FD612_DIG1_ADDR,0x00, &FD612_base_DispBuff);
1169   4              FD612_PotiveTNage(FD612_DIG2_ADDR,0x00, &FD612_base_DispBuff);  
1170   4              FD612_PotiveTNage(FD612_DIG3_ADDR,0x00, &FD612_base_DispBuff);  
1171   4              FD612_PotiveTNage(FD612_DIG4_ADDR,0x00, &FD612_base_DispBuff);
1172   4              FD612_Base_Refresh(&FD612_base_DispBuff,&fd612_base_ops);
1173   4              }
1174   3            }       
1175   2              time1_second=0;
1176   2            } 
1177   1      }
1178          
1179          #if 0 
              void alarm_bilnk_display(UINT8 i,UINT8 j,UINT8 k,struct DATA_ALARM alarm)
              {
              
                        
                   
                        if(j==1)
                        {
              
                          anode_display(FD616_DIG6_ADDR,dis[alarm.minute/10]);
                          anode_display(FD616_DIG7_ADDR,dis[alarm.minute%10]);            
                        if(time1_second==1)
                        {
                            if(blink2_flag)
                            {
                              anode_display(FD616_DIG4_ADDR,dis[alarm.hour/10]);
                              anode_display(FD616_DIG5_ADDR,dis[alarm.hour%10]);
                              if(i==1)
                              {     if(alarm1_pm_flag)  FD616_DispBuff.DispData[14] |= 1<<3;}
                              if(i==2)
                              {     if(alarm2_pm_flag)  FD616_DispBuff.DispData[14] |= 1<<3;}
                              if(i==3)
                              {     if(alarm3_pm_flag)  FD616_DispBuff.DispData[14] |= 1<<3;}   
                              if(alarm1_on_dispaly||alarm2_on_dispaly||alarm3_on_dispaly)       FD616_DispBuff.DispData[14] |= 1<<6
             -;
                              blink2_flag=0;
                              FD616_DispBuff.DispData[14] |= 1<<4;
                              FD616_Refresh();
              
                            }
                            else
                            {
                              blink2_flag=1;
                              if(k==0){
              
                                anode_display(FD616_DIG4_ADDR,0x00);
                                anode_display(FD616_DIG5_ADDR,0x00);
                              if(i==1)
                              {     if(alarm1_pm_flag)  FD616_DispBuff.DispData[14] |= 1<<3;}
                              if(i==2)
                              {     if(alarm2_pm_flag)  FD616_DispBuff.DispData[14] |= 1<<3;}
                              if(i==3)
                              {     if(alarm3_pm_flag)  FD616_DispBuff.DispData[14] |= 1<<3;}   
                              if(alarm1_on_dispaly||alarm2_on_dispaly||alarm3_on_dispaly)       FD616_DispBuff.DispData[14] |= 1<<6
             -;
                              FD616_DispBuff.DispData[14] |= 1<<4;  
                              FD616_Refresh();
                              }
C51 COMPILER V9.52.0.0   USR                                                               07/26/2018 17:42:19 PAGE 21  

                            }
                        
                          time1_second=0;
                        }
                      }
                      
                      if(j==2)
                      {
                          anode_display(FD616_DIG4_ADDR,dis[alarm.hour/10]);
                          anode_display(FD616_DIG5_ADDR,dis[alarm.hour%10]);
                        
              
                        if(time1_second==1)
                        {
              
              
              
                            if(blink2_flag)
                            {
                              blink2_flag=0;
                              
                
                              anode_display(FD616_DIG6_ADDR,dis[alarm.minute/10]);
                              anode_display(FD616_DIG7_ADDR,dis[alarm.minute%10]);  
                              if(i==1)
                              {     if(alarm1_pm_flag)  FD616_DispBuff.DispData[14] |= 1<<3;}
                              if(i==2)
                              {     if(alarm2_pm_flag)  FD616_DispBuff.DispData[14] |= 1<<3;}
                              if(i==3)
                              {     if(alarm3_pm_flag)  FD616_DispBuff.DispData[14] |= 1<<3;} 
                              if(alarm1_on_dispaly||alarm2_on_dispaly||alarm3_on_dispaly)       FD616_DispBuff.DispData[14] |= 1<<6
             -;
                              blink_flag=0;
                              FD616_DispBuff.DispData[14] |= 1<<4;
                              FD616_Refresh();
                              
                            }
                            else
                            {
                              blink2_flag=1;
                              if(k==0){
                                anode_display(FD616_DIG6_ADDR,0x00);
                                anode_display(FD616_DIG7_ADDR,0x00);
                              if(i==1)
                              {     if(alarm1_pm_flag)  FD616_DispBuff.DispData[14] |= 1<<3;}
                              if(i==2)
                              {     if(alarm2_pm_flag)  FD616_DispBuff.DispData[14] |= 1<<3;}
                              if(i==3)
                              {     if(alarm3_pm_flag)  FD616_DispBuff.DispData[14] |= 1<<3;} 
                              if(alarm1_on_dispaly||alarm2_on_dispaly||alarm3_on_dispaly)       FD616_DispBuff.DispData[14] |= 1<<6
             -;
                              FD616_DispBuff.DispData[14] |= 1<<4;  
                              FD616_Refresh();                  
                              }
                            }           
                          time1_second=0;
                        }   
                      }
              }
              #endif
1283          void display_all(void)
1284          {
C51 COMPILER V9.52.0.0   USR                                                               07/26/2018 17:42:19 PAGE 22  

1285   1          
1286   1      
1287   1                
1288   1              if(display_flag_hur_min==1)
1289   1              {
1290   2               hour_min_display();
1291   2      
1292   2            
1293   2              }
1294   1              if(display_flag_mon_day==1)
1295   1              {
1296   2              if(time.month>=10)
1297   2              {
1298   3              FD612_PotiveTNage(FD612_DIG7_ADDR,dis[time.month/10], &FD612_base_DispBuff);
1299   3              FD612_PotiveTNage(FD612_DIG8_ADDR,dis[time.month%10], &FD612_base_DispBuff);          
1300   3              }
1301   2              else if(time.month<=9)
1302   2              {
1303   3              FD612_PotiveTNage(FD612_DIG7_ADDR,0x00, &FD612_base_DispBuff);  
1304   3              FD612_PotiveTNage(FD612_DIG8_ADDR,dis[time.month], &FD612_base_DispBuff);         
1305   3              }
1306   2              FD612_PotiveTNage(FD612_DIG5_ADDR,dis[time.mday/10], &FD612_base_DispBuff); 
1307   2              FD612_PotiveTNage(FD612_DIG6_ADDR,dis[time.mday%10], &FD612_base_DispBuff);   
1308   2              FD612_base_DispBuff.DispData[FD612_DIG12_ADDR] |= 1<<4;         
1309   2              FD612_Base_Refresh(&FD612_base_DispBuff,&fd612_base_ops);
1310   2              }
1311   1              if(display_flag_year==1)
1312   1              {
1313   2              FD612_PotiveTNage(FD612_DIG1_ADDR,dis[2], &FD612_base_DispBuff);
1314   2              FD612_PotiveTNage(FD612_DIG2_ADDR,dis[0], &FD612_base_DispBuff);  
1315   2              FD612_PotiveTNage(FD612_DIG3_ADDR,dis[time.year/10], &FD612_base_DispBuff); 
1316   2              FD612_PotiveTNage(FD612_DIG4_ADDR,dis[time.year%10], &FD612_base_DispBuff);
1317   2              FD612_Base_Refresh(&FD612_base_DispBuff,&fd612_base_ops);
1318   2              }
1319   1              if(adc_first==1)
1320   1              {
1321   2                ADC_Convert( );
1322   2                adc_first=0;
1323   2              }
1324   1              if(ADC_TIME_Flag==temp_refresh_time)
1325   1              {
1326   2                ADC_Convert( );
1327   2                ADC_TIME_Flag=0;
1328   2              }
1329   1      
1330   1              de_week();
1331   1              
1332   1              if(ADC_Display1==0)
1333   1              { 
1334   2                FD612_PotiveTNage(FD612_DIG9_ADDR,dis[(unsigned char)TEM/10], &FD612_base_DispBuff);
1335   2                FD612_PotiveTNage(FD612_DIG10_ADDR,dis[(unsigned char)TEM%10], &FD612_base_DispBuff); 
1336   2                FD612_PotiveTNage(FD612_DIG11_ADDR,FD612_DISP_cc, &FD612_base_DispBuff);
1337   2                FD612_base_DispBuff.DispData[FD612_DIG8_ADDR] |= 1<<6;
1338   2                
1339   2      //          FD612_PotiveTNage(FD612_DIG9_ADDR,dis[SET_Short_Flag_display], &FD612_base_DispBuff);
1340   2      //          FD612_PotiveTNage(FD612_DIG10_ADDR,dis[SET_Long_Flag], &FD612_base_DispBuff);
1341   2      //          FD612_Base_Refresh(&FD612_base_DispBuff,&fd612_base_ops);         
1342   2              }
1343   1              else
1344   1              {
1345   2                ADC_AVG_NUM[2]   = (unsigned char)TEM_F/100;
1346   2                ADC_AVG_NUM[1]   = ((unsigned char)TEM_F-ADC_AVG_NUM[2]*100 )/10;
C51 COMPILER V9.52.0.0   USR                                                               07/26/2018 17:42:19 PAGE 23  

1347   2                ADC_AVG_NUM[0]   = ((unsigned char)TEM_F-ADC_AVG_NUM[2]*100 )%10;         
1348   2                FD612_PotiveTNage(FD612_DIG9_ADDR,dis[ADC_AVG_NUM[2]], &FD612_base_DispBuff);
1349   2                FD612_PotiveTNage(FD612_DIG10_ADDR,dis[ADC_AVG_NUM[1]], &FD612_base_DispBuff);  
1350   2                FD612_PotiveTNage(FD612_DIG11_ADDR,dis[ADC_AVG_NUM[0]], &FD612_base_DispBuff);
1351   2                FD612_Base_Refresh(&FD612_base_DispBuff,&fd612_base_ops);
1352   2      
1353   2              }
1354   1            
1355   1            
1356   1      }
1357          
1358          void set_time_hour_blink(UINT8 i)
1359          {
1360   1          
1361   1          if(time1_second)
1362   1          {
1363   2      
1364   2      
1365   2            anode_display(FD616_DIG6_ADDR,dis[time.minute/10]);
1366   2            anode_display(FD616_DIG7_ADDR,dis[time.minute%10]);
1367   2            if(blink2_flag)
1368   2            {
1369   3              if(i==0)blink2_flag=0;        
1370   3               anode_display(FD616_DIG4_ADDR,dis[time.hour/10]);
1371   3               anode_display(FD616_DIG5_ADDR,dis[time.hour%10]);
1372   3              
1373   3            }
1374   2            else
1375   2            {
1376   3              blink2_flag=1;        
1377   3              anode_display(FD616_DIG4_ADDR,0x00);
1378   3              anode_display(FD616_DIG5_ADDR,0x00);                    
1379   3            }
1380   2          FD616_DispBuff.DispData[14] |= 1<<4;
1381   2          if(hour_pm_flag)  FD616_DispBuff.DispData[14] |= 1<<3;
1382   2          if(alarm1.alarm_on_dispaly||alarm2.alarm_on_dispaly||alarm3.alarm_on_dispaly)       FD616_DispBuff.DispData
             -[14] |= 1<<6;
1383   2          FD616_Refresh();  
1384   2          time1_second=0;
1385   2          }
1386   1      }
1387          
1388          
1389          void after_arrive_write_1302(void)
1390          {
1391   1        
1392   1      //       if(time.hour==12)
1393   1      //     {
1394   1             ResetDS1302();             
1395   1             WriteByteDS1302(hour_r_addr); //��ȡʱ�ĵ�ַ
1396   1             hour_chage_state=ReadByteDS1302();
1397   1             if(hour_chage_state&0x20)
1398   1             {
1399   2               hour_chage_state &=~(1<<5);
1400   2               hour_pm_flag=0;
1401   2             }
1402   1             else 
1403   1             {
1404   2               hour_chage_state |=(1<<5);
1405   2               hour_pm_flag=1;
1406   2             }
1407   1              ds1302_w_on();    
C51 COMPILER V9.52.0.0   USR                                                               07/26/2018 17:42:19 PAGE 24  

1408   1             ResetDS1302();
1409   1             WriteByteDS1302(hour_w_addr); //д��ʱ�ĵ�ַ
1410   1             WriteByteDS1302(hour_chage_state); 
1411   1              ds1302_w_off();      
1412   1      //      }
1413   1      }
1414          
1415          void set_time_minute_blink(UINT8 i)
1416          {
1417   1          if(time1_second)
1418   1        {
1419   2               anode_display(FD616_DIG4_ADDR,dis[time.hour/10]);
1420   2               anode_display(FD616_DIG5_ADDR,dis[time.hour%10]);
1421   2      
1422   2            if(blink2_flag)
1423   2            {
1424   3              if(i==0)blink2_flag=0;
1425   3      
1426   3               anode_display(FD616_DIG6_ADDR,dis[time.minute/10]);
1427   3               anode_display(FD616_DIG7_ADDR,dis[time.minute%10]);
1428   3      //        FD616_DispBuff.DispData[14] |= 1<<4;
1429   3      //        if(hour_pm_flag)  FD616_DispBuff.DispData[14] |= 1<<3;
1430   3      //        if(alarm1.alarm_on_dispaly||alarm2.alarm_on_dispaly||alarm3.alarm_on_dispaly)       FD616_DispBuff.Disp
             -Data[14] |= 1<<6;
1431   3      //          FD616_Refresh();
1432   3            }
1433   2            else
1434   2            {
1435   3              blink2_flag=1;        
1436   3              anode_display(FD616_DIG6_ADDR,0x00);
1437   3              anode_display(FD616_DIG7_ADDR,0x00);
1438   3      //          if(hour_pm_flag)  FD616_DispBuff.DispData[14] |= 1<<3;
1439   3      //          FD616_DispBuff.DispData[14] |= 1<<4;
1440   3      //          if(alarm1_on_dispaly||alarm2_on_dispaly||alarm3_on_dispaly)       FD616_DispBuff.DispData[14] |= 1<<6;
1441   3      //          FD616_Refresh();
1442   3              
1443   3            } 
1444   2            FD616_DispBuff.DispData[14] |= 1<<4;
1445   2            if(hour_pm_flag)  FD616_DispBuff.DispData[14] |= 1<<3;
1446   2            if(alarm1.alarm_on_dispaly||alarm2.alarm_on_dispaly||alarm3.alarm_on_dispaly)       FD616_DispBuff.DispDat
             -a[14] |= 1<<6;
1447   2            FD616_Refresh();      
1448   2            time1_second=0;
1449   2         }
1450   1      }
1451          
1452          
1453          void set_time_mon_blink(UINT8 i)
1454          {
1455   1                FD612_PotiveTNage(FD612_DIG5_ADDR,dis[time.mday/10], &FD612_base_DispBuff); 
1456   1                FD612_PotiveTNage(FD612_DIG6_ADDR,dis[time.mday%10], &FD612_base_DispBuff);
1457   1      //        FD612_base_DispBuff.DispData[FD612_DIG12_ADDR] |= 1<<5;
1458   1                FD612_base_DispBuff.DispData[FD612_DIG12_ADDR] |= 1<<4;
1459   1                  if(time1_second)
1460   1                {
1461   2      
1462   2                  if(blink2_flag)
1463   2                  {
1464   3                    blink2_flag=0;
1465   3                    if(time.month>=10)
1466   3                    {
1467   4                    FD612_PotiveTNage(FD612_DIG7_ADDR,dis[time.month/10], &FD612_base_DispBuff);
C51 COMPILER V9.52.0.0   USR                                                               07/26/2018 17:42:19 PAGE 25  

1468   4                    FD612_PotiveTNage(FD612_DIG8_ADDR,dis[time.month%10], &FD612_base_DispBuff);  
1469   4      FD612_base_DispBuff.DispData[FD612_DIG12_ADDR] |= 1<<4;               
1470   4                    }
1471   3                    else if(time.month<=9)
1472   3                    {
1473   4                    FD612_PotiveTNage(FD612_DIG7_ADDR,0x00, &FD612_base_DispBuff);  
1474   4                    FD612_PotiveTNage(FD612_DIG8_ADDR,dis[time.month], &FD612_base_DispBuff);   
1475   4      FD612_base_DispBuff.DispData[FD612_DIG12_ADDR] |= 1<<4;               
1476   4                    }
1477   3      //              FD612_base_DispBuff.DispData[FD612_DIG12_ADDR] |= 1<<4;
1478   3                    FD612_Base_Refresh(&FD612_base_DispBuff,&fd612_base_ops);
1479   3                    
1480   3                  }
1481   2                  else
1482   2                  {
1483   3                    blink2_flag=1;
1484   3                    if(i==0){
1485   4                    FD612_PotiveTNage(FD612_DIG7_ADDR,0x00, &FD612_base_DispBuff);
1486   4                    FD612_PotiveTNage(FD612_DIG8_ADDR,0x00, &FD612_base_DispBuff);
1487   4                      FD612_base_DispBuff.DispData[FD612_DIG12_ADDR] |= 1<<4;
1488   4      //                FD612_base_DispBuff.DispData[FD612_DIG12_ADDR] |= 1<<4;
1489   4                    FD612_Base_Refresh(&FD612_base_DispBuff,&fd612_base_ops);
1490   4                    }
1491   3                  }           
1492   2                  time1_second=0;
1493   2                }
1494   1      }
1495          
1496          void set_time_day_blink(UINT8 i)
1497          {
1498   1                  if(time.month>=10)
1499   1                  {
1500   2                  FD612_PotiveTNage(FD612_DIG7_ADDR,dis[time.month/10], &FD612_base_DispBuff);
1501   2                  FD612_PotiveTNage(FD612_DIG8_ADDR,dis[time.month%10], &FD612_base_DispBuff);          
1502   2                  }
1503   1                  else if(time.month<=9)
1504   1                  {
1505   2                  FD612_PotiveTNage(FD612_DIG7_ADDR,0x00, &FD612_base_DispBuff);  
1506   2                  FD612_PotiveTNage(FD612_DIG8_ADDR,dis[time.month], &FD612_base_DispBuff);         
1507   2                  }
1508   1                    if(time1_second)
1509   1                  {
1510   2      
1511   2                    if(blink2_flag)
1512   2                    {
1513   3                      blink2_flag=0;
1514   3                      FD612_PotiveTNage(FD612_DIG5_ADDR,dis[time.mday/10], &FD612_base_DispBuff); 
1515   3                      FD612_PotiveTNage(FD612_DIG6_ADDR,dis[time.mday%10], &FD612_base_DispBuff);
1516   3                      FD612_base_DispBuff.DispData[FD612_DIG12_ADDR] |= 1<<4;
1517   3      //                FD612_base_DispBuff.DispData[FD612_DIG12_ADDR] |= 1<<4;
1518   3                      FD612_Base_Refresh(&FD612_base_DispBuff,&fd612_base_ops);
1519   3                      
1520   3                    }
1521   2                    else
1522   2                    {
1523   3                      blink2_flag=1;
1524   3                      if(i==0){
1525   4                      FD612_PotiveTNage(FD612_DIG5_ADDR,0x00, &FD612_base_DispBuff);
1526   4                      FD612_PotiveTNage(FD612_DIG6_ADDR,0x00, &FD612_base_DispBuff);
1527   4                        FD612_base_DispBuff.DispData[FD612_DIG12_ADDR] |= 1<<4;
1528   4      //                  FD612_base_DispBuff.DispData[FD612_DIG12_ADDR] |= 1<<4;
1529   4                      FD612_Base_Refresh(&FD612_base_DispBuff,&fd612_base_ops);
C51 COMPILER V9.52.0.0   USR                                                               07/26/2018 17:42:19 PAGE 26  

1530   4                      }
1531   3                    }             
1532   2                    time1_second=0;
1533   2                   }
1534   1      }
1535          
1536          #if 0
              void alarm_key_short_up_down(UINT8 i)
              {
                  if(UP_Short_Flag==1)
                  {
                     switch(i)
                     {
                       case 1:
                       {
                         alarm1.hour++;
                         if(hour_12_24_flag)
                          {
                             if(alarm1.hour>=13)
                             {
                               alarm1.hour = 1;
              
                             }
                             if(alarm1.hour==12)
                             {
                               if(alarm1_pm_flag)alarm1_pm_flag=0;
                               else alarm1_pm_flag=1;
                             }
                          }
                          else
                          {
                            if(alarm1.hour >=24)
                            {
                              alarm1.hour = 0;
                            }
                          }
                          break;
                       }
                       case 2:
                       {
                         alarm2.hour++;
                         if(hour_12_24_flag)
                          {
                             if(alarm2.hour>=13)
                             {
                               alarm2.hour = 1;
              
                             }
                             if(alarm2.hour==12)
                             {
                               if(alarm2_pm_flag)alarm2_pm_flag=0;
                               else alarm2_pm_flag=1;
                             }
                          }
                          else
                          {
                            if(alarm2.hour >=24)
                            {
                              alarm2.hour = 0;
                            }
                          }
                          break;
C51 COMPILER V9.52.0.0   USR                                                               07/26/2018 17:42:19 PAGE 27  

                       }
                       case 3:
                       {
                         alarm3.hour++;
                         if(hour_12_24_flag)
                          {
                             if(alarm3.hour>=13)
                             {
                               alarm3.hour = 1;
              
                             }
                             if(alarm3.hour==12)
                             {
                               if(alarm3_pm_flag)alarm3_pm_flag=0;
                               else alarm3_pm_flag=1;
                             }
                          }
                          else
                          {
                            if(alarm3.hour >=24)
                            {
                              alarm3.hour = 0;
                            }
                          }
                          break;
                       }
                      }      
                      
                  UP_Short_Flag=0;    
                }
                if(DOWN_Short_Flag == 1)
                {
              
                     switch(i)
                     {
                       case 1:
                       {
                         alarm1.hour--;
                         if(hour_12_24_flag)
                          {
                             if(alarm1.hour>=13||alarm1.hour==0)
                             {
                              alarm1.hour = alarm1.hour -244; //���ֵ
              
                             }
                             if(alarm1.hour==11)
                             {
                               if(alarm1_pm_flag)alarm1_pm_flag=0;
                               else alarm1_pm_flag=1;
                             }
                          }
                          else
                          {
                            if(alarm1.hour >=24)
                            {
                              alarm1.hour = alarm1.hour -232; //���ֵ
                            }
                          }
                          break;
                       }
                       case 2:
                       {
C51 COMPILER V9.52.0.0   USR                                                               07/26/2018 17:42:19 PAGE 28  

                         alarm2.hour--;
                         if(hour_12_24_flag)
                          {
                             if(alarm2.hour>=13||alarm2.hour==0)
                             {
                              alarm2.hour = alarm2.hour -244; //���ֵ
              
                             }
                             if(alarm2.hour==11)
                             {
                               if(alarm2_pm_flag)alarm2_pm_flag=0;
                               else alarm2_pm_flag=1;
                             }
                          }
                          else
                          {
                            if(alarm2.hour >=24)
                            {
                              alarm2.hour = alarm2.hour -232; //���ֵ
                            }
                          }
                          break;
                       }
                       case 3:
                       {
                         alarm3.hour--;
                         if(hour_12_24_flag)
                          {
                             if(alarm3.hour>=13||alarm3.hour==0)
                             {
                              alarm3.hour = alarm3.hour -244; //���ֵ
              
                             }
                             if(alarm3.hour==11)
                             {
                               if(alarm3_pm_flag)alarm3_pm_flag=0;
                               else alarm3_pm_flag=1;
                             }
                          }
                          else
                          {
                            if(alarm3.hour >=24)
                            {
                              alarm3.hour = alarm3.hour -232; //���ֵ
                            }
                          }
                          break;
                       }
                      
                      }
                      DOWN_Short_Flag =0;
                }
              }
              #endif
1708          void key_display_up_down(void)
1709          {
1710   1            if(key_time_2second==0&&SET_Long_Flag==1)
1711   1            {
1712   2                switch(SET_Short_Flag_display)
1713   2                  {
1714   3                    case 0:
1715   3                    {
C51 COMPILER V9.52.0.0   USR                                                               07/26/2018 17:42:19 PAGE 29  

1716   4                      set_time_year_blink(1);
1717   4                      break;                
1718   4                    }
1719   3                    case 1:
1720   3                    {
1721   4                      set_time_mon_blink(1);
1722   4                      break;                
1723   4                    }
1724   3                    case 2:
1725   3                    {
1726   4                      set_time_day_blink(1);        
1727   4                      break;                
1728   4                    }
1729   3      //              case 3:
1730   3      //              {
1731   3      //              
1732   3      //                break;                
1733   3      //              }
1734   3                    case 4:
1735   3                    {
1736   4                      set_time_hour_blink(1);
1737   4                      break;                
1738   4                    }
1739   3                    case 5:
1740   3                    {
1741   4                      set_time_minute_blink(1);
1742   4                      break;                
1743   4                    }
1744   3      //              case 6:
1745   3      //              {
1746   3      //                
1747   3      //                
1748   3      //                break;                
1749   3      //              }
1750   3                    case 7:
1751   3                    {
1752   4                      alarm_hour_blink(1,&alarm1);
1753   4      //                alarm_bilnk_display(1,1,1,alarm1);
1754   4                      break;                
1755   4                    }
1756   3                     case 8:
1757   3                    {
1758   4      //                alarm_bilnk_display(1,2,1,alarm1);
1759   4                      alarm_min_blink(1,&alarm1);
1760   4                      break;                
1761   4                    }
1762   3      //              case 9:
1763   3      //              {
1764   3      //                
1765   3      //                break;                
1766   3      //              }
1767   3                    case 10:
1768   3                    {
1769   4                      alarm_hour_blink(1,&alarm2);
1770   4      //              alarm_bilnk_display(2,1,1,alarm2);
1771   4                      break;                
1772   4                    } 
1773   3                    case 11:
1774   3                    {
1775   4                        alarm_min_blink(1,&alarm2);
1776   4      //                alarm_bilnk_display(2,2,1,alarm2);
1777   4                      break;                
C51 COMPILER V9.52.0.0   USR                                                               07/26/2018 17:42:19 PAGE 30  

1778   4                    }
1779   3      //              case 12:
1780   3      //              {
1781   3      //              
1782   3      //                break;                
1783   3      //              }
1784   3                    case 13:
1785   3                    {
1786   4                      alarm_hour_blink(1,&alarm3);
1787   4      //                alarm_bilnk_display(3,1,1,alarm3);
1788   4                      break;                
1789   4                    } 
1790   3                    case 14:
1791   3                    {
1792   4                      alarm_min_blink(1,&alarm3);
1793   4      //                alarm_bilnk_display(3,2,1,alarm3);
1794   4                      break;                
1795   4                    }
1796   3                      default:
1797   3                      {
1798   4      
1799   4                        break;
1800   4                      }
1801   3                  }
1802   2                                                                                
1803   2            }
1804   1      }
1805          
1806          
1807          void hour_long_up_down(UINT8 i)
1808          {
1809   1      
1810   1              time.hour=Read_addr_byte_ds1302(hour_r_addr);
1811   1              if(hour_12_24_flag==1)
1812   1              {
1813   2                time.hour<<=3;
1814   2                time.hour>>=3;
1815   2      
1816   2              }
1817   1              time.hour = bcd_decimal(time.hour);
1818   1              if(i==0) 
1819   1              {
1820   2                time.hour++;
1821   2                hour_over_judge(0);
1822   2      
1823   2              
1824   2              }
1825   1              if(i==1)
1826   1              { 
1827   2                  time.hour--;
1828   2                  hour_over_judge(1);
1829   2              }
1830   1              time.hour=Read_addr_byte_ds1302(hour_r_addr);
1831   1              if(hour_12_24_flag==1)
1832   1              {
1833   2                time.hour<<=3;
1834   2                time.hour>>=3;
1835   2      
1836   2              }
1837   1              time.hour = bcd_decimal(time.hour);
1838   1              anode_display(FD616_DIG4_ADDR,dis[time.hour/10]);
1839   1              anode_display(FD616_DIG5_ADDR,dis[time.hour%10]);
C51 COMPILER V9.52.0.0   USR                                                               07/26/2018 17:42:19 PAGE 31  

1840   1              FD616_DispBuff.DispData[14] |= 1<<4;        
1841   1              if(hour_pm_flag)  FD616_DispBuff.DispData[14] |= 1<<3;
1842   1              if(alarm1.alarm_on_dispaly||alarm2.alarm_on_dispaly||alarm3.alarm_on_dispaly)       FD616_DispBuff.DispDa
             -ta[14] |= 1<<6;
1843   1              FD616_Refresh();
1844   1              bright_contrl();
1845   1              Delay_ms(up_down_delay_time);
1846   1              back_TIME_Flag=0;         
1847   1        
1848   1      }
1849          
1850          
1851          void min_long_up_down(UINT8 i) 
1852          {
1853   1            
1854   1            time.minute=Read_addr_byte_ds1302(min_r_addr);
1855   1            time.minute = bcd_decimal(time.minute);
1856   1            if(i==0)
1857   1            {
1858   2              time.minute++;
1859   2              min_over_judge(0);
1860   2            }
1861   1            if(i==1)
1862   1            {
1863   2            time.minute--;
1864   2            min_over_judge(1);
1865   2            }
1866   1              time.minute=Read_addr_byte_ds1302(min_r_addr);
1867   1              time.minute = bcd_decimal(time.minute);
1868   1               anode_display(FD616_DIG6_ADDR,dis[time.minute/10]);
1869   1               anode_display(FD616_DIG7_ADDR,dis[time.minute%10]);
1870   1            if(hour_pm_flag)  FD616_DispBuff.DispData[14] |= 1<<3;
1871   1            FD616_DispBuff.DispData[14] |= 1<<4;
1872   1            if(alarm1.alarm_on_dispaly||alarm2.alarm_on_dispaly||alarm3.alarm_on_dispaly)       FD616_DispBuff.DispDat
             -a[14] |= 1<<6;
1873   1               FD616_Refresh();
1874   1      
1875   1      //      time.minute = decimal_bcd(time.minute);
1876   1      //      ds1302_w_on();
1877   1      //      ResetDS1302();
1878   1      //      WriteByteDS1302(min_w_addr); //
1879   1      //      WriteByteDS1302(time.minute);
1880   1      //      ResetDS1302();
1881   1      //      WriteByteDS1302(sec_w_addr); //д����ĵ�ַ
1882   1      //      WriteByteDS1302(0);
1883   1      //      ResetDS1302();
1884   1      //      ds1302_w_off();
1885   1      //      time.minute = bcd_decimal(time.minute);
1886   1            Delay_ms(up_down_delay_time);
1887   1            back_TIME_Flag=0;
1888   1      }
1889          
1890          void year_long_up_down(UINT8 i)
1891          {
1892   1            time.year=Read_addr_byte_ds1302(year_r_addr);
1893   1            time.year = bcd_decimal(time.year);
1894   1            if(i==1)
1895   1            {
1896   2              time.year--;
1897   2              if(time.year==255)time.year=99;
1898   2            }
1899   1            if(i==0)
C51 COMPILER V9.52.0.0   USR                                                               07/26/2018 17:42:19 PAGE 32  

1900   1            {
1901   2              time.year++;
1902   2              if(time.year>99)time.year=0;
1903   2                
1904   2            }
1905   1              FD612_PotiveTNage(FD612_DIG1_ADDR,dis[2], &FD612_base_DispBuff);
1906   1              FD612_PotiveTNage(FD612_DIG2_ADDR,dis[0], &FD612_base_DispBuff);  
1907   1              FD612_PotiveTNage(FD612_DIG3_ADDR,dis[time.year/10], &FD612_base_DispBuff); 
1908   1              FD612_PotiveTNage(FD612_DIG4_ADDR,dis[time.year%10], &FD612_base_DispBuff);
1909   1              FD612_Base_Refresh(&FD612_base_DispBuff,&fd612_base_ops);              
1910   1            time.year = decimal_bcd(time.year);
1911   1            Write_addr_byte_ds1302(year_w_addr,time.year);
1912   1            Delay_ms(up_down_delay_time); 
1913   1            back_TIME_Flag=0;
1914   1      }
1915          
1916          
1917          void mon_long_up_down(UINT8 i)
1918          {
1919   1          time.month=Read_addr_byte_ds1302(mon_r_addr);
1920   1      //      ResetDS1302();
1921   1      //      WriteByteDS1302(mon_r_addr); //��ȡ�ֵĵ�ַ       
1922   1      //      time.month=ReadByteDS1302();
1923   1      //      ResetDS1302();
1924   1            time.month = bcd_decimal(time.month); 
1925   1            if(i==0)
1926   1            {
1927   2              time.month++;
1928   2              mon_over_judge();
1929   2            }
1930   1            if(i==1)
1931   1            {
1932   2            time.month--;
1933   2            mon_over_judge();
1934   2            } 
1935   1        
1936   1              if(time.month>=10)
1937   1              {
1938   2              FD612_PotiveTNage(FD612_DIG7_ADDR,dis[time.month/10], &FD612_base_DispBuff);
1939   2              FD612_PotiveTNage(FD612_DIG8_ADDR,dis[time.month%10], &FD612_base_DispBuff);  
1940   2              FD612_base_DispBuff.DispData[FD612_DIG12_ADDR] |= 1<<4;         
1941   2              }
1942   1              else if(time.month<=9)
1943   1              {
1944   2              FD612_PotiveTNage(FD612_DIG7_ADDR,0x00, &FD612_base_DispBuff);  
1945   2              FD612_PotiveTNage(FD612_DIG8_ADDR,dis[time.month], &FD612_base_DispBuff); 
1946   2              FD612_base_DispBuff.DispData[FD612_DIG12_ADDR] |= 1<<4;         
1947   2              }
1948   1      
1949   1              FD612_Base_Refresh(&FD612_base_DispBuff,&fd612_base_ops); 
1950   1      
1951   1            time.month = decimal_bcd(time.month);
1952   1            Write_addr_byte_ds1302(mon_w_addr,time.month);  
1953   1          
1954   1            Delay_ms(up_down_delay_time);
1955   1            back_TIME_Flag=0;     
1956   1      }
1957          
1958          void mday_long_up_down(UINT8 i)
1959          {
1960   1            time.mday=Read_addr_byte_ds1302(day_r_addr);
1961   1            time.mday = bcd_decimal(time.mday);
C51 COMPILER V9.52.0.0   USR                                                               07/26/2018 17:42:19 PAGE 33  

1962   1            if(i==0)
1963   1            {
1964   2              time.mday++;
1965   2              mday_over_judge();
1966   2            }
1967   1            if(i==1)
1968   1            {
1969   2            time.mday--;
1970   2              mday_over_judge();  
1971   2            } 
1972   1      
1973   1              FD612_PotiveTNage(FD612_DIG5_ADDR,dis[time.mday/10], &FD612_base_DispBuff); 
1974   1              FD612_PotiveTNage(FD612_DIG6_ADDR,dis[time.mday%10], &FD612_base_DispBuff);
1975   1              FD612_base_DispBuff.DispData[FD612_DIG12_ADDR] |= 1<<4;
1976   1              FD612_Base_Refresh(&FD612_base_DispBuff,&fd612_base_ops);       
1977   1              time.mday = decimal_bcd(time.mday);
1978   1              Write_addr_byte_ds1302(day_w_addr,time.mday);
1979   1              time.mday = bcd_decimal(time.mday);
1980   1            
1981   1              Delay_ms(up_down_delay_time); 
1982   1              back_TIME_Flag=0;     
1983   1      }
1984          
1985          #if 0
              void alarm_hour_long_up_down(UINT8 alarm_seclect,UINT8 up_down_seclect,struct DATA_ALARM alarm)
              {
                if(up_down_seclect==1)
                {
                      if(alarm_seclect==1&&UP==0)
                      {
                        
                        alarm1.hour++;
                        if(hour_12_24_flag){
                           if(alarm1.hour>=13)
                           {
                             alarm1.hour = 1;
                           }
                          if(alarm1.hour==1)
                          {
                            if(alarm1_pm_flag)alarm1_pm_flag=0;
                            else alarm1_pm_flag=1;            
                          }
                          }
                        else
                        {
                          if(alarm1.hour >=24)
                          {
                            alarm1.hour = 0;
                          } 
                        }
                        alarm_hour_long_up_down_flag=1;
                      }
                      if(alarm_seclect==2)
                      {
                        alarm2.hour++;
                        if(hour_12_24_flag){
                           if(alarm2.hour>=13)
                           {
                             alarm2.hour = 1;
              
                           }
                          if(alarm2.hour==1)
C51 COMPILER V9.52.0.0   USR                                                               07/26/2018 17:42:19 PAGE 34  

                          {
                            if(alarm2_pm_flag)alarm2_pm_flag=0;
                            else alarm2_pm_flag=1;            
                          }            
                          }
                        else
                        {
                          if(alarm2.hour >=24)
                          {
                            alarm2.hour = 0;
                          } 
                        }
                        alarm_hour_long_up_down_flag=2;
                      } 
                      if(alarm_seclect==3)
                      {
                        alarm3.hour++;
                        if(hour_12_24_flag){
                           if(alarm3.hour>=13)
                           {
                             alarm3.hour = 1;
              
                           }
                          if(alarm3.hour==1)
                          {
                            if(alarm3_pm_flag)alarm3_pm_flag=0;
                            else alarm3_pm_flag=1;            
                          }              
                          }
                        else
                        {
                          if(alarm3.hour >=24)
                          {
                            alarm3.hour = 0;
                          } 
                        }
                        alarm_hour_long_up_down_flag=3;
                      }
                  }
                  if(up_down_seclect==2)
                  {
                    if(alarm_seclect==1)
                    {
                      alarm1.hour--;          
                      if(hour_12_24_flag){
                         if(alarm1.hour>=13||alarm1.hour==0)
                         {
                            alarm1.hour = alarm1.hour -244; //���ֵ
                          
                         }
                          if(alarm1.hour==10)
                          {
                            if(alarm1_pm_flag)alarm1_pm_flag=0;
                            else alarm1_pm_flag=1;            
                          } 
                        }
                      else
                      {
                        if(alarm1.hour >=24)
                        {
                          alarm1.hour = alarm1.hour -232; //���ֵ
                        }
C51 COMPILER V9.52.0.0   USR                                                               07/26/2018 17:42:19 PAGE 35  

                      } 
                    alarm_hour_long_up_down_flag=4;
                    }
                    if(alarm_seclect==2)
                    {
                      alarm2.hour--;          
                      if(hour_12_24_flag){
                         if(alarm2.hour>=13||alarm2.hour==0)
                         {
                            alarm2.hour = alarm2.hour -244; //���ֵ
              
                         }
                            if(alarm2.hour==10)
                          {
                            if(alarm2_pm_flag)alarm2_pm_flag=0;
                            else alarm2_pm_flag=1;            
                          } 
                        }
                      else
                      {
                        if(alarm2.hour >=24)
                        {
                          alarm2.hour = alarm2.hour -232; //���ֵ
                        }
                      } 
              
                    alarm_hour_long_up_down_flag=5;
                    }
                    if(alarm_seclect==3)
                    {
                      alarm3.hour--;          
                      if(hour_12_24_flag){
                         if(alarm3.hour>=13||alarm3.hour==0)
                         {
                            alarm3.hour = alarm3.hour -244; //���ֵ
                         }
                          if(alarm3.hour==10)
                          {
                            if(alarm3_pm_flag)alarm3_pm_flag=0;
                            else alarm3_pm_flag=1;            
                          } 
                        }
                      else
                      {
                        if(alarm3.hour >=24)
                        {
                          alarm3.hour = alarm3.hour -232; //���ֵ
                        }
                      } 
                    alarm_hour_long_up_down_flag=6;
                    }   
                  }
                      anode_display(FD616_DIG4_ADDR,dis[alarm.hour/10]);
                      anode_display(FD616_DIG5_ADDR,dis[alarm.hour%10]);
                      FD616_DispBuff.DispData[14] |= 1<<4;
                      if(alarm_seclect==1)
                      {     if(alarm1_pm_flag)  FD616_DispBuff.DispData[14] |= 1<<3;}
                      if(alarm_seclect==2)
                      {     if(alarm2_pm_flag)  FD616_DispBuff.DispData[14] |= 1<<3;}
                      if(alarm_seclect==3)
                      {     if(alarm3_pm_flag)  FD616_DispBuff.DispData[14] |= 1<<3;}   
              if(alarm1_on_dispaly||alarm2_on_dispaly||alarm3_on_dispaly)       FD616_DispBuff.DispData[14] |= 1<<6;        
C51 COMPILER V9.52.0.0   USR                                                               07/26/2018 17:42:19 PAGE 36  

                      FD616_Refresh();
                      Delay_ms(up_down_delay_time);
                      
                      back_TIME_Flag=0;
                      
              }
              #endif
2155          #if 0
              void alarm_min_long_up_down(UINT8 alarm_seclect,UINT8 up_down_seclect,struct DATA_ALARM alarm)
              {
                if(up_down_seclect==1)
                {
                      if(alarm_seclect==1)
                      {
                        alarm1.minute++;
                      if(alarm1.minute >=60)
                      {
                        alarm1.minute = 0;
                      }
                      alarm_min_long_up_down_flag=1;
                      }
                      if(alarm_seclect==2)
                      {
                        alarm2.minute++;
                      if(alarm2.minute >=60)
                      {
                        alarm2.minute = 0;
                      }
                      alarm_min_long_up_down_flag=2;        
                      }
                      if(alarm_seclect==3)
                      {
                        alarm3.minute++;
                      if(alarm3.minute >=60)
                      {
                        alarm3.minute = 0;
                      }
                      alarm_min_long_up_down_flag=3;        
                      } 
                  }
                  if(up_down_seclect==2)
                  {
                      if(alarm_seclect==1)
                      {
                        alarm1.minute--;
                      if(alarm1.minute>60)
                      {
                          alarm1.minute = alarm1.minute -196; //���ֵ
                      }
                      alarm_min_long_up_down_flag=4;        
                      }
                      if(alarm_seclect==2)
                      {
                        alarm2.minute--;
                      if(alarm2.minute>60)
                      {
                          alarm2.minute = alarm2.minute -196; //���ֵ
                      }
                      alarm_min_long_up_down_flag=5;        
                      }
                      if(alarm_seclect==3)
                      {
C51 COMPILER V9.52.0.0   USR                                                               07/26/2018 17:42:19 PAGE 37  

                        alarm3.minute--;
                      if(alarm3.minute>60)
                      {
                          alarm3.minute = alarm3.minute -196; //���ֵ
                      }
                      alarm_min_long_up_down_flag=6;        
                      }     
                  }
                        anode_display(FD616_DIG6_ADDR,dis[alarm.minute/10]);
                        anode_display(FD616_DIG7_ADDR,dis[alarm.minute%10]);
                      if(alarm_seclect==1)
                      {     if(alarm1_pm_flag)  FD616_DispBuff.DispData[14] |= 1<<3;}
                      if(alarm_seclect==2)
                      {     if(alarm2_pm_flag)  FD616_DispBuff.DispData[14] |= 1<<3;}
                      if(alarm_seclect==3)
                      {     if(alarm3_pm_flag)  FD616_DispBuff.DispData[14] |= 1<<3;}   
                      if(alarm1_on_dispaly||alarm2_on_dispaly||alarm3_on_dispaly)       FD616_DispBuff.DispData[14] |= 1<<6;      
             -  
                       FD616_DispBuff.DispData[14] |= 1<<4; 
                        FD616_Refresh();
              
                      Delay_ms(up_down_delay_time);
                      back_TIME_Flag=0;
                      
              }
              #endif
2235          void  ADC_Convert(void)
2236          {
2237   1          unsigned int AD_Value;
2238   1          float VCC = 3.3;                           
2239   1          float ADC_VALUE;                                                     
2240   1          unsigned int B_value = 3950;
2241   1          
2242   1      
2243   1        
2244   1          ADCON |= AST(1);  
2245   1          while(!(ADCON & 0x20));
2246   1          ADCON |= ADIF;
2247   1          
2248   1          AD_Value = ADCDH*256 + ADCDL;
2249   1          AD_Value >>= 4;
2250   1      
2251   1          ADC_VALUE= AD_Value*VCC/4096;
2252   1      
2253   1          TEM = 1/(log(ADC_VALUE/(VCC - ADC_VALUE))/B_value + 1/(273.15 + 25));
2254   1          TEM=TEM- 273.15;
2255   1          TEM_F=TEM*1.8+32;
2256   1      
2257   1        
2258   1      }
2259          
2260          
2261          
2262          void alarm_sleep_judge(struct DATA_ALARM* alarm)
2263          {
2264   1          UINT8 alarm_value1,alarm_value2,alarm_value3,alarm_value4,alarm_value5;
2265   1          if(time.second==0 && time.hour==alarm->hour && time.minute==alarm->minute&&hour_pm_flag==alarm->alarm_pm
             -_flag)
2266   1          {
2267   2            alarm->alarm_flag=1;
2268   2            alarm_voice_flag=1;     
2269   2          }
C51 COMPILER V9.52.0.0   USR                                                               07/26/2018 17:42:19 PAGE 38  

2270   1          if(alarm->alarm_flag)
2271   1          {
2272   2            alarm_value1=alarm->minute+alarm_time;
2273   2            alarm_value2=alarm->minute+alarm_time+sleep_time;
2274   2            alarm_value3=alarm->minute+(alarm_time*2)+sleep_time;
2275   2            alarm_value4=alarm->minute+(alarm_time*2)+(sleep_time*2);
2276   2            alarm_value5=alarm->minute+(alarm_time*3)+(sleep_time*2);   
2277   2            if(alarm_voice_flag)
2278   2            {       
2279   3              if(alarm_clock_flag)
2280   3              {
2281   4                if(TR0)
2282   4                {TR0=0;buzzer=0;}
2283   4                else TR0=1;
2284   4                alarm_clock_flag=0;
2285   4              }               
2286   3            }
2287   2            if((alarm_value1)>=60)
2288   2            {
2289   3              if((alarm_value1-60)==time.minute)
2290   3              {
2291   4               TR0=0;
2292   4               buzzer=0;
2293   4               alarm_voice_flag=0;
2294   4              }
2295   3            }
2296   2            else if((alarm_value1)==time.minute)
2297   2            {
2298   3              TR0=0;
2299   3              buzzer=0;
2300   3              alarm_voice_flag=0;
2301   3            }
2302   2            if((alarm_value2)>=60)
2303   2            {
2304   3              if((alarm_value2-60)==time.minute)
2305   3              {
2306   4                alarm_voice_flag=1;
2307   4              }       
2308   3            }
2309   2            else if(alarm_value2==time.minute)
2310   2            {
2311   3              alarm_voice_flag=1;
2312   3            }
2313   2            if((alarm_value3)>=60)
2314   2            {
2315   3              if((alarm_value3-60)==time.minute)
2316   3              {
2317   4                TR0=0;
2318   4                buzzer=0;
2319   4                alarm_voice_flag=0;
2320   4              }       
2321   3            }
2322   2            else if((alarm_value3)==time.minute)
2323   2            {
2324   3              TR0=0;
2325   3              buzzer=0;
2326   3              alarm_voice_flag=0;
2327   3            }
2328   2            if((alarm_value4)>=60)
2329   2            {
2330   3              if((alarm_value4-60)==time.minute)
2331   3              {
C51 COMPILER V9.52.0.0   USR                                                               07/26/2018 17:42:19 PAGE 39  

2332   4                alarm_voice_flag=1;
2333   4              }       
2334   3            }
2335   2            else if((alarm_value4)==time.minute)
2336   2            {
2337   3              alarm_voice_flag=1;
2338   3            }
2339   2            if((alarm_value5)>=60)
2340   2            {
2341   3              if((alarm_value5-60)==time.minute)
2342   3              {
2343   4                TR0=0;
2344   4                buzzer=0;
2345   4                alarm->alarm_flag=0;
2346   4                alarm_voice_flag=0;
2347   4              }     
2348   3            }
2349   2            else if((alarm_value5)==time.minute)
2350   2            {
2351   3              TR0=0;
2352   3              buzzer=0;
2353   3              alarm->alarm_flag=0;
2354   3              alarm_voice_flag=0;
2355   3            }     
2356   2          }
2357   1      
2358   1          
2359   1      }
2360          #if 0
              void alarm1_sleep(void)
              {
                  UINT8 alarm1_value1,alarm1_value2,alarm1_value3,alarm1_value4,alarm1_value5;
                  if(time.second==0 && time.hour==alarm1.hour && time.minute==alarm1.minute&&hour_pm_flag==alarm1_pm_flag)
                  {
                    alarm_flag=1;
                    alarm_voice_flag=1;
                  }
                  if(alarm_flag)
                  {
                    alarm1_value1=alarm1.minute+alarm_time;
                    alarm1_value2=alarm1.minute+alarm_time+sleep_time;
                    alarm1_value3=alarm1.minute+(alarm_time*2)+sleep_time;
                    alarm1_value4=alarm1.minute+(alarm_time*2)+(sleep_time*2);
                    alarm1_value5=alarm1.minute+(alarm_time*3)+(sleep_time*2);
                    if(alarm_voice_flag)
                    {
              
                      if(alarm_clock_flag)
                      {
                        if(TR0)
                        {TR0=0;buzzer=0;}
                        else TR0=1;
                        alarm_clock_flag=0;
                      }       
                    
                    }
                    GPIO_Init(P04F,INPUT|PU_EN);
                    if(vibration_key==0)
                    {
                      TR0=0;
                      buzzer=0;
                      alarm_voice_flag=0;       
C51 COMPILER V9.52.0.0   USR                                                               07/26/2018 17:42:19 PAGE 40  

                    }
                if((alarm1_value1)>=60)
                    {
                      if((alarm1_value1-60)==time.minute)
                      {
                       TR0=0;
                       buzzer=0;
                       alarm_voice_flag=0;
                      }
                    }
                    else if((alarm1_value1)==time.minute)
                    {
                      TR0=0;
                      buzzer=0;
                      alarm_voice_flag=0;
                    }
                    if((alarm1_value2)>=60)
                    {
                      if((alarm1_value2-60)==time.minute&&time.second==0)
                      {
                        alarm_voice_flag=1;
                      }       
                    }
                    else if(alarm1_value2==time.minute&&time.second==0)
                    {
                      alarm_voice_flag=1;
                    }
                    if((alarm1_value3)>=60)
                    {
                      if((alarm1_value3-60)==time.minute)
                      {
                        TR0=0;
                        buzzer=0;
                        alarm_voice_flag=0;
                      }       
                    }
                    else if((alarm1_value3)==time.minute)
                    {
                      TR0=0;
                      buzzer=0;
                      alarm_voice_flag=0;
                    }
                    if((alarm1_value4)>=60)
                    {
                      if((alarm1_value4-60)==time.minute&&time.second==0)
                      {
                        alarm_voice_flag=1;
                      }       
                    }
                    else if((alarm1_value4)==time.minute&&time.second==0)
                    {
                      alarm_voice_flag=1;
                    }
                    if((alarm1_value5)>=60)
                    {
                      if((alarm1_value5-60)==time.minute)
                      {
                        TR0=0;
                        buzzer=0;
                        alarm_voice_flag=0;
                      }     
                    }
C51 COMPILER V9.52.0.0   USR                                                               07/26/2018 17:42:19 PAGE 41  

                    else if((alarm1_value5)==time.minute)
                    {
                      TR0=0;
                      buzzer=0;
                      alarm_voice_flag=0;
                    }
              
                  }
              }
              
              void alarm2_sleep(void)
              {
                UINT8 alarm2_value1,alarm2_value2,alarm2_value3,alarm2_value4,alarm2_value5;
                  if(time.second==0 && time.hour==alarm2.hour && time.minute==alarm2.minute&&hour_pm_flag==alarm2_pm_flag)
                  {
                    alarm2_flag=1;
                    alarm2_voice_flag=1;
                  }
                  if(alarm2_flag)
                  {
                  alarm2_value1=alarm2.minute+alarm_time;
                    alarm2_value2=alarm2.minute+alarm_time+sleep_time;
                    alarm2_value3=alarm2.minute+(alarm_time*2)+sleep_time;
                    alarm2_value4=alarm2.minute+(alarm_time*2)+(sleep_time*2);
                    alarm2_value5=alarm2.minute+(alarm_time*3)+(sleep_time*2);      
                    if(alarm2_voice_flag)
                    {
                      if(alarm_clock_flag)
                      {
                        if(TR0)
                        {TR0=0;buzzer=0;}
                        else TR0=1;
                        alarm_clock_flag=0;
                      }
                    }
                    GPIO_Init(P04F,INPUT|PU_EN);
                    if(vibration_key==0)
                    {
                      TR0=0;
                      buzzer=0;
                      alarm2_voice_flag=0;        
                    }     
                if((alarm2_value1)>=60)
                    {
                      if((alarm2_value1-60)==time.minute)
                      {
                        TR0=0;
                        buzzer=0;
                        alarm2_voice_flag=0;
                      }     
                    }
                    else if((alarm2_value1)==time.minute)
                    {
                      TR0=0;
                      buzzer=0;
                      alarm2_voice_flag=0;
                    }
                    if((alarm2_value2)>=60)
                    {
                       if((alarm2_value2-60)==time.minute&&time.second==0)
                      {
                        alarm2_voice_flag=1;
C51 COMPILER V9.52.0.0   USR                                                               07/26/2018 17:42:19 PAGE 42  

                      }
                    }
                    else if((alarm2_value2)==time.minute&&time.second==0)
                    {
                      alarm2_voice_flag=1;
                    }
                    if((alarm2_value3)>=60)
                    {
                      if((alarm2_value3-60)>=time.minute)
                      {
                        TR0=0;
                        buzzer=0;
                        alarm2_voice_flag=0;
                      }
                    }     
                    else if((alarm2_value3)==time.minute)
                    {
                      TR0=0;
                      buzzer=0;
                      alarm2_voice_flag=0;
                    }
                    if((alarm2_value4)>=60)
                    {
                      if((alarm2_value4-60)==time.minute&&time.second==0)
                      alarm2_voice_flag=1;
                    }     
                    else if((alarm2_value4)==time.minute&&time.second==0)
                    {
                      alarm2_voice_flag=1;
                    }
                    if((alarm2_value5)>=60)
                    {
                    if((alarm2_value5-60)==time.minute)
                    {
                      TR0=0;
                      buzzer=0;
                      alarm2_voice_flag=0;
                    }       
                    }
                    else if((alarm2_value5)==time.minute)
                    {
                      TR0=0;
                      buzzer=0;
                      alarm2_voice_flag=0;
                    }
              
                  }
              
              }
              
              void alarm3_sleep(void)
              {
                UINT8 alarm3_value1,alarm3_value2,alarm3_value3,alarm3_value4,alarm3_value5;
                  if(time.second==0 && time.hour==alarm3.hour && time.minute==alarm3.minute&&hour_pm_flag==alarm3_pm_flag)
                  {
                    alarm3_flag=1;
                    alarm3_voice_flag=1;
                  }
                  if(alarm3_flag)
                  {
                      alarm3_value1=alarm3.minute+alarm_time;
                    alarm3_value2=alarm3.minute+alarm_time+sleep_time;
C51 COMPILER V9.52.0.0   USR                                                               07/26/2018 17:42:19 PAGE 43  

                    alarm3_value3=alarm3.minute+(alarm_time*2)+sleep_time;
                    alarm3_value4=alarm3.minute+(alarm_time*2)+(sleep_time*2);
                    alarm3_value5=alarm3.minute+(alarm_time*3)+(sleep_time*2);
                    if(alarm3_voice_flag)
                    {
                      if(alarm_clock_flag)
                      {
                        if(TR0)
                        {TR0=0;buzzer=0;}
                        else TR0=1;
                        alarm_clock_flag=0;
                      }
                    }
                    GPIO_Init(P04F,INPUT|PU_EN);
                    if(vibration_key==0)
                    {
                      TR0=0;
                      buzzer=0;
                      alarm3_voice_flag=0;        
                    }     
                    if((alarm3.minute+alarm_time)==time.minute)
                    {
                      TR0=0;
                      buzzer=0;
                      alarm3_voice_flag=0;
                    }
                    if((alarm3_value1)>=60)
                    {
                      if((alarm3_value1-60)==time.minute)
                      {
                        TR0=0;
                        buzzer=0;
                        alarm3_voice_flag=0;
                      }       
                    }
                    else if((alarm3_value1)==time.minute)
                    {
                      TR0=0;
                      buzzer=0;
                      alarm3_voice_flag=0;
                    }
                    
                    if((alarm3_value2)>=60)
                    {
                      if((alarm3_value2-60)==time.minute&&time.second==0)
                      {
                        alarm3_voice_flag=1;
                      }       
                    }
                    else if((alarm3_value2)==time.minute&&time.second==0)
                    {
                      alarm3_voice_flag=1;
                    }
                    if((alarm3_value3)>=60)
                    {
                      if((alarm3_value3-60)==time.minute)
                      {
                        TR0=0;
                        buzzer=0;
                        alarm3_voice_flag=0;
                      }       
                    }
C51 COMPILER V9.52.0.0   USR                                                               07/26/2018 17:42:19 PAGE 44  

                    else if((alarm3_value3)==time.minute)
                    {
                      TR0=0;
                      buzzer=0;
                      alarm3_voice_flag=0;
                    }
                    if((alarm3_value4)>=60)
                    {
                      if((alarm3_value4-60)==time.minute&&time.second==0)
                      {
                        alarm3_voice_flag=1;
                      }       
                    }
                    else if((alarm3_value4)==time.minute&&time.second==0)
                    {
                      alarm3_voice_flag=1;
                    }
                    if((alarm3_value5)>=60)
                    {
                      if((alarm3_value5-60)==time.minute)
                      {
                        TR0=0;
                        buzzer=0;
                        alarm3_voice_flag=0;
                      }       
                    }
                    else if((alarm3_value5)==time.minute)
                    {
                      TR0=0;
                      buzzer=0;
                      alarm3_voice_flag=0;
                    }
              
                  }
              
              }
              #endif
2679          
2680          void Week_display(UINT8 value)
2681          {
2682   1        switch (value)
2683   1        {
2684   2          case 1:
2685   2          {
2686   3      
2687   3            anode_display(FD616_DIG1_ADDR,FD616_DISP_M_DATA);
2688   3            anode_display(FD616_DIG2_ADDR,FD616_DISP_O_DATA );
2689   3            anode_display(FD616_DIG3_ADDR,FD616_DISP_N_DATA );      
2690   3            break;
2691   3          }
2692   2          case 2:
2693   2          {
2694   3            anode_display(FD616_DIG1_ADDR,FD616_DISP_T_DATA);
2695   3            anode_display(FD616_DIG2_ADDR,FD616_DISP_U_DATA );
2696   3            anode_display(FD616_DIG3_ADDR,FD616_DISP_E_DATA );
2697   3            break;
2698   3          }
2699   2          case 3:
2700   2          {
2701   3            anode_display(FD616_DIG1_ADDR,FD616_DISP_W_DATA);
2702   3            anode_display(FD616_DIG2_ADDR,FD616_DISP_E_DATA );
2703   3            anode_display(FD616_DIG3_ADDR,FD616_DISP_D_DATA );
C51 COMPILER V9.52.0.0   USR                                                               07/26/2018 17:42:19 PAGE 45  

2704   3            
2705   3            break;
2706   3          }
2707   2          case 4:
2708   2          {
2709   3            anode_display(FD616_DIG1_ADDR,FD616_DISP_T_DATA);
2710   3            anode_display(FD616_DIG2_ADDR,FD616_DISP_H_DATA );
2711   3            anode_display(FD616_DIG3_ADDR,FD616_DISP_U_DATA );
2712   3            
2713   3            break;
2714   3          }
2715   2          case 5:
2716   2          {
2717   3            anode_display(FD616_DIG1_ADDR,FD616_DISP_F_DATA);
2718   3            anode_display(FD616_DIG2_ADDR,FD616_DISP_R_DATA );
2719   3            anode_display(FD616_DIG3_ADDR,FD616_DISP_I_DATA );
2720   3            
2721   3            break;
2722   3          }
2723   2          case 6:
2724   2          {
2725   3            anode_display(FD616_DIG1_ADDR,FD616_DISP_S_DATA);
2726   3            anode_display(FD616_DIG2_ADDR,FD616_DISP_A_DATA );
2727   3            anode_display(FD616_DIG3_ADDR,FD616_DISP_T_DATA );
2728   3            
2729   3            break;
2730   3          }
2731   2          case 7:
2732   2          {
2733   3            anode_display(FD616_DIG1_ADDR,FD616_DISP_S_DATA);
2734   3            anode_display(FD616_DIG2_ADDR,FD616_DISP_U_DATA );
2735   3            anode_display(FD616_DIG3_ADDR,FD616_DISP_N_DATA );
2736   3            
2737   3            break;
2738   3          }
2739   2          default:
2740   2            break;
2741   2          
2742   2        }
2743   1      }
2744          
2745          //���ڵ��ж�
2746          void de_week(void) 
2747          { 
2748   1        unsigned long  i,year2,j,day=0; 
2749   1        unsigned char   mweek,month,mday;
2750   1        unsigned char   year;
2751   1          
2752   1        ResetDS1302();
2753   1        WriteByteDS1302(year_r_addr); //����ĵ�ַ
2754   1        year=ReadByteDS1302();
2755   1        ResetDS1302();
2756   1        WriteByteDS1302(mon_r_addr); //���µĵ�ַ
2757   1        month=ReadByteDS1302();
2758   1        ResetDS1302();
2759   1        WriteByteDS1302(day_r_addr); //���յĵ�ַ
2760   1        mday=ReadByteDS1302();
2761   1        
2762   1        year = bcd_decimal(year);
2763   1        month = bcd_decimal(month);
2764   1        mday = bcd_decimal(mday);
2765   1        
C51 COMPILER V9.52.0.0   USR                                                               07/26/2018 17:42:19 PAGE 46  

2766   1        year2 = year+2000;
2767   1         for(i= 2000;i<year2;i++)
2768   1        {
2769   2            if(leep_year(i))day+=366;        
2770   2            else day+=365;  
2771   2        }
2772   1         for(j=1;j<month;j++)
2773   1        {
2774   2            if(j==1 || j==3 || j==5 || j==7 || j==8 || j==10 || j==12)
2775   2            day+=31;        
2776   2            if(j==4 || j==6 || j==9 || j==11)       
2777   2            day+=30; 
2778   2            if(flag_year_leap && j==2) day+=29;    
2779   2            if((!flag_year_leap)&&j==2) day+=28;  
2780   2        }
2781   1         day+=mday;   
2782   1         mweek=day%7;  
2783   1         switch(mweek) 
2784   1        {
2785   2           case 0:time.week=5;break;    
2786   2           case 1:time.week=6;break;     
2787   2           case 2:time.week=7;break;    
2788   2           case 3:time.week=1;break;      
2789   2           case 4:time.week=2;break;      
2790   2           case 5:time.week=3;break;      
2791   2           case 6:time.week=4;break;  
2792   2        }
2793   1        ds1302_w_on();
2794   1          ResetDS1302();
2795   1          WriteByteDS1302(week_w_addr); //д�����ڵĵ�ַ
2796   1          WriteByteDS1302(time.week);
2797   1          ResetDS1302();
2798   1        ds1302_w_off();
2799   1        if(display_flag_week==1) 
2800   1        Week_display(time.week);
2801   1      } 
2802          
2803          
2804          
2805          void sd_mode (void)
2806          {
2807   1        if(DOWN_Short_Flag)
2808   1        {
2809   2          back_voice_Flag=0;
2810   2      //    up_down_flag=1;//up_down����ģʽѡ���ͻ
2811   2          if(SET_Long_Flag==0)
2812   2          {
2813   3            display_flag_year=0;
2814   3      //      dislay_all_flag=1;
2815   3            sd_flag++;
2816   3            if(sd_select_first==1)
2817   3                {
2818   4                  sd_flag--;
2819   4                  sd_select_first=0;
2820   4                }
2821   3                if(sd_flag>1)sd_flag=0;     
2822   3              switch(sd_flag)
2823   3              {
2824   4                case 0:
2825   4                {
2826   5                  FD612_PotiveTNage(FD612_DIG1_ADDR,0x40, &FD612_base_DispBuff);
2827   5                  FD612_PotiveTNage(FD612_DIG2_ADDR,0x40, &FD612_base_DispBuff);
C51 COMPILER V9.52.0.0   USR                                                               07/26/2018 17:42:19 PAGE 47  

2828   5                  FD612_PotiveTNage(FD612_DIG3_ADDR,FD612_DISP_S, &FD612_base_DispBuff);  
2829   5                  FD612_PotiveTNage(FD612_DIG4_ADDR,FD612_DISP_d, &FD612_base_DispBuff);
2830   5                  FD612_Base_Refresh(&FD612_base_DispBuff,&fd612_base_ops);             
2831   5      //            FD612_PotiveTNage(FD612_DIG7_ADDR,FD612_DISP_S, &FD612_base_DispBuff);  
2832   5      //            FD612_PotiveTNage(FD612_DIG8_ADDR,FD612_DISP_d, &FD612_base_DispBuff);
2833   5      //            FD612_Base_Refresh(&FD612_base_DispBuff,&fd612_base_ops);
2834   5                  
2835   5      //            FD612_display_4DIG_input(0x40  ,0x40 ,FD612_DISP_S ,FD612_DISP_d  );
2836   5                  sd_mode_flag=0;
2837   5                  break;
2838   5            
2839   5                }
2840   4                case 1: 
2841   4                {
2842   5                  FD612_PotiveTNage(FD612_DIG1_ADDR,0x5c, &FD612_base_DispBuff);
2843   5                  FD612_PotiveTNage(FD612_DIG2_ADDR,0x54, &FD612_base_DispBuff);
2844   5                  FD612_PotiveTNage(FD612_DIG3_ADDR,FD612_DISP_S, &FD612_base_DispBuff);  
2845   5                  FD612_PotiveTNage(FD612_DIG4_ADDR,FD612_DISP_d, &FD612_base_DispBuff);
2846   5                  FD612_Base_Refresh(&FD612_base_DispBuff,&fd612_base_ops);             
2847   5      //            FD612_display_4DIG_input(0x5c  ,0x54 ,FD612_DISP_S ,FD612_DISP_d );
2848   5                  sd_mode_flag=1;
2849   5                  break;
2850   5                }
2851   4                  default :
2852   4                  break;
2853   4                
2854   4              }
2855   3          }
2856   2      //    power_delay_time=0;
2857   2          DOWN_Short_Flag=0;  
2858   2      //    mode_select_first=1;
2859   2        if(back_first)
2860   2          {
2861   3            back_TIME_Flag=0;
2862   3            back_first=0;
2863   3          }   
2864   2        }
2865   1        if(back_first)
2866   1          {
2867   2            back_TIME_Flag=0;
2868   2            back_first=0;
2869   2          }
2870   1          if(back_TIME_Flag==over_time  ||SET_Short_Flag==1)
2871   1          {
2872   2      //      power_delay_time=0;
2873   2            display_flag_year=1;
2874   2      //      dislay_all_flag=0;
2875   2            back_TIME_Flag=0;
2876   2            back_first=1; 
2877   2            UP_Short_Flag=0;
2878   2            SET_Short_Flag=0;
2879   2      //      mode_select_first=1;
2880   2            sd_select_first=1;
2881   2            up_down_flag=0;
2882   2          } 
2883   1          if(sd_mode_flag)
2884   1          {
2885   2            voice_control();
2886   2          }
2887   1      //    else
2888   1      //    { 
2889   1      //      bright_contrl();
C51 COMPILER V9.52.0.0   USR                                                               07/26/2018 17:42:19 PAGE 48  

2890   1      //      power_detect( );
2891   1      //    } 
2892   1      }
2893          
2894          
2895          void voice_control(void)
2896          {
2897   1      //  if(SET_Long_Flag==0)
2898   1      //  {
2899   1          if(voice_flag==0)
2900   1          {
2901   2            GPIO_Init(P03F,INPUT|PD_EN);
2902   2          if(voice_key==1)
2903   2            {
2904   3        GPIO_Init(P03F,INPUT|PD_EN);
2905   3              if(voice_key==1)
2906   3              {
2907   4                  
2908   4      
2909   4                bright_contrl();
2910   4                if(FD616_DispBuff.DispState==FD616_OFF||FD612_base_DispBuff.DispState==FD612_DISP_OFF)
2911   4                {
2912   5                FD616_DispBuff.DispState=FD616_INTENS8;
2913   5                FD616_Command(FD616_DispBuff.DispState);
2914   5                FD612_base_DispBuff.DispState=FD612_DISP_ON|FD612_INTENS8;
2915   5                FD612_Command(&fd612_base_ops,FD612_base_DispBuff.DispState); 
2916   5                bright_contrl();            
2917   5                }
2918   4      
2919   4              }
2920   3      
2921   3            }
2922   2      
2923   2              else
2924   2              {
2925   3                FD616_DispBuff.DispState=FD616_OFF;
2926   3                FD616_Command(FD616_DispBuff.DispState);
2927   3                FD612_base_DispBuff.DispState=FD612_DISP_OFF;
2928   3                FD612_Command(&fd612_base_ops,FD612_base_DispBuff.DispState);
2929   3      
2930   3              }     
2931   2          }
2932   1          if(FD612_base_DispBuff.DispState&0x08||FD616_DispBuff.DispState&0x01)//
2933   1              {
2934   2              
2935   2                voice_flag=1;
2936   2                if(voice_fisrt)
2937   2                {
2938   3      //            voice_flag=1;
2939   3                  back_voice_Flag=0;
2940   3                  voice_fisrt=0;
2941   3                }
2942   2      
2943   2                if(back_voice_Flag==voice_wake_up_time)
2944   2                {
2945   3                  back_voice_Flag=0;
2946   3                  voice_flag=0;
2947   3                  voice_fisrt=1;
2948   3                  
2949   3                  FD616_DispBuff.DispState=FD616_OFF;
2950   3                  FD616_Command(FD616_DispBuff.DispState);
2951   3                  FD612_base_DispBuff.DispState=FD612_DISP_OFF;
C51 COMPILER V9.52.0.0   USR                                                               07/26/2018 17:42:19 PAGE 49  

2952   3                  FD612_Command(&fd612_base_ops,FD612_base_DispBuff.DispState);           
2953   3      //            FD612_DispStateWr(FD612_DISP_OFF); 
2954   3      //            FD612_Refresh();
2955   3                  Delay_ms(150);
2956   3                  Delay_ms(150);
2957   3              
2958   3                }
2959   2              }
2960   1      //      }
2961   1      }
2962          
2963          
2964          
2965          void InitDS1302(void)
2966          {   
2967   1            unsigned char year,month,mday,week,hour,minute,second ;
2968   1            year = decimal_bcd(year_init); 
2969   1            month =decimal_bcd(month_init);
2970   1            mday = decimal_bcd(mday_init);
2971   1            week = decimal_bcd(week_init);
2972   1            hour = decimal_bcd(hour_init);
2973   1            minute = decimal_bcd(minute_init);
2974   1            second = decimal_bcd(second_init);
2975   1            
2976   1            hour |= 1<<7;
2977   1            hour &=~ (1<<5);
2978   1            hour_12_24_flag=1;
2979   1            hour_pm_flag=0;
2980   1            ds1302_w_on();
2981   1      //      ResetDS1302();
2982   1      //      WriteByteDS1302(0x8e);                          //д�������ƼĴ���
2983   1      //      WriteByteDS1302(0x0);                           //����д��
2984   1            
2985   1            ResetDS1302();
2986   1            WriteByteDS1302(0x90);                          //д��������ƼĴ���
2987   1            WriteByteDS1302(0xab);                          //������
2988   1            
2989   1            ResetDS1302();
2990   1            WriteByteDS1302(0xbe);                          //д���ֽ�ͻ����ʽ���ƼĴ���
2991   1            
2992   1            WriteByteDS1302(second);
2993   1            WriteByteDS1302(minute);
2994   1            WriteByteDS1302(hour);
2995   1            WriteByteDS1302(mday);
2996   1            WriteByteDS1302(month);
2997   1            WriteByteDS1302(week);
2998   1            WriteByteDS1302(year);
2999   1            WriteByteDS1302(0);                             //��д�������ƼĴ���д��0
3000   1            ResetDS1302();
3001   1            ds1302_w_off();
3002   1      //      alarm1_on_dispaly=0;alarm2_on_dispaly=0;alarm3_on_dispaly=0;
3003   1            set_status_flag=0;SET_Long_Flag=0;
3004   1            display_flag_hur_min=1,display_flag_mon_day=1,display_flag_year=1,display_flag_week=1;      
3005   1            sd_mode_flag=0;
3006   1            sd_flag=0;
3007   1      //      display_init( );
3008   1      //      from_ds1302_read_time_data();
3009   1            
3010   1                
3011   1      }
3012          
3013          
C51 COMPILER V9.52.0.0   USR                                                               07/26/2018 17:42:19 PAGE 50  

3014          void bright_contrl(void)
3015          {
3016   1          UINT8 hour;
3017   1      
3018   1          ResetDS1302();              
3019   1          WriteByteDS1302(hour_r_addr); //��ȡʱ�ĵ�ַ
3020   1          hour=ReadByteDS1302();
3021   1      //    ResetDS1302();              
3022   1      //    WriteByteDS1302(min_r_addr); //��ȡʱ�ĵ�ַ
3023   1      //    minute=ReadByteDS1302();
3024   1        if(hour_12_24_flag)
3025   1        {
3026   2          hour<<=3;
3027   2          hour>>=3;
3028   2          hour = bcd_decimal( hour);
3029   2          if(hour_pm_flag)//afternoon
3030   2          {
3031   3            if( hour>=1&&hour<=6||hour==12)
3032   3            {
3033   4                FD616_DispBuff.DispState=FD616_INTENS8;
3034   4                FD616_Command(FD616_DispBuff.DispState);
3035   4                FD612_base_DispBuff.DispState=FD612_DISP_ON|FD612_INTENS8;
3036   4                FD612_Command(&fd612_base_ops,FD612_base_DispBuff.DispState);
3037   4            }
3038   3            if(hour>=7&&hour<=11)
3039   3            {
3040   4                FD616_DispBuff.DispState=FD616_INTENS3;
3041   4                FD616_Command(FD616_DispBuff.DispState);
3042   4                FD612_base_DispBuff.DispState=FD612_DISP_ON|FD612_INTENS3;
3043   4                FD612_Command(&fd612_base_ops,FD612_base_DispBuff.DispState);       
3044   4            }
3045   3          }
3046   2          else
3047   2          {
3048   3             if( hour>=7&&hour<=11)
3049   3            {
3050   4                FD616_DispBuff.DispState=FD616_INTENS8;
3051   4                FD616_Command(FD616_DispBuff.DispState);
3052   4                FD612_base_DispBuff.DispState=FD612_DISP_ON|FD612_INTENS8;
3053   4                FD612_Command(&fd612_base_ops,FD612_base_DispBuff.DispState);
3054   4            }
3055   3            if(hour>=1&&hour<=6||hour==12)
3056   3            {
3057   4                FD616_DispBuff.DispState=FD616_INTENS3;
3058   4                FD616_Command(FD616_DispBuff.DispState);
3059   4                FD612_base_DispBuff.DispState=FD612_DISP_ON|FD612_INTENS3;
3060   4                FD612_Command(&fd612_base_ops,FD612_base_DispBuff.DispState);       
3061   4            }     
3062   3          }
3063   2        }
3064   1        else
3065   1        {   
3066   2           hour = bcd_decimal( hour);
3067   2             if( hour>=7&&hour<19)
3068   2            {
3069   3                FD616_DispBuff.DispState=FD616_INTENS8;
3070   3                FD616_Command(FD616_DispBuff.DispState);
3071   3                FD612_base_DispBuff.DispState=FD612_DISP_ON|FD612_INTENS8;
3072   3                FD612_Command(&fd612_base_ops,FD612_base_DispBuff.DispState);
3073   3            }
3074   2            else
3075   2            {
C51 COMPILER V9.52.0.0   USR                                                               07/26/2018 17:42:19 PAGE 51  

3076   3                FD616_DispBuff.DispState=FD616_INTENS3;
3077   3                FD616_Command(FD616_DispBuff.DispState);
3078   3                FD612_base_DispBuff.DispState=FD612_DISP_ON|FD612_INTENS3;
3079   3                FD612_Command(&fd612_base_ops,FD612_base_DispBuff.DispState);
3080   3            }
3081   2      
3082   2        }
3083   1      
3084   1      }
3085          
3086          
3087          void display_init(void)
3088          {
3089   1        
3090   1        UINT8 i,loop;
3091   1        Delay_ms(1000);
3092   1        for(i=0;i<10;i++)
3093   1        {
3094   2      
3095   2           FD612_PotiveTNage(FD612_DIG1_ADDR,dis[i], &FD612_base_DispBuff);
3096   2           FD612_PotiveTNage(FD612_DIG2_ADDR,dis[i], &FD612_base_DispBuff); 
3097   2           FD612_PotiveTNage(FD612_DIG3_ADDR,dis[i], &FD612_base_DispBuff); 
3098   2           FD612_PotiveTNage(FD612_DIG4_ADDR,dis[i], &FD612_base_DispBuff);
3099   2           FD612_PotiveTNage(FD612_DIG5_ADDR,dis[i], &FD612_base_DispBuff);
3100   2           FD612_PotiveTNage(FD612_DIG6_ADDR,dis[i], &FD612_base_DispBuff); 
3101   2           FD612_PotiveTNage(FD612_DIG7_ADDR,dis[i], &FD612_base_DispBuff); 
3102   2           FD612_PotiveTNage(FD612_DIG8_ADDR,dis[i], &FD612_base_DispBuff);
3103   2           FD612_PotiveTNage(FD612_DIG9_ADDR,dis[i], &FD612_base_DispBuff);
3104   2           FD612_PotiveTNage(FD612_DIG10_ADDR,dis[i], &FD612_base_DispBuff);  
3105   2           FD612_PotiveTNage(FD612_DIG11_ADDR,dis[i], &FD612_base_DispBuff);  
3106   2           FD612_PotiveTNage(FD612_DIG12_ADDR,dis[i], &FD612_base_DispBuff);    
3107   2      
3108   2           anode_display(FD616_DIG4_ADDR,dis[i]);
3109   2           anode_display(FD616_DIG5_ADDR,dis[i]);
3110   2           anode_display(FD616_DIG6_ADDR,dis[i]);
3111   2           anode_display(FD616_DIG7_ADDR,dis[i]);
3112   2            FD616_Refresh();      
3113   2           FD612_Base_Refresh(&FD612_base_DispBuff,&fd612_base_ops);  
3114   2          Delay_ms(1000);
3115   2        }
3116   1          for(loop = 0;loop < 12;loop++){
3117   2          FD612_base_DispBuff.DispData[loop] = 0X00;
3118   2          }
3119   1           for(i=0;i<16;i++)
3120   1          {
3121   2            FD616_DispBuff.DispData[i]=0X00;
3122   2          }
3123   1          FD616_Refresh();
3124   1          FD612_Base_Refresh(&FD612_base_DispBuff,&fd612_base_ops); 
3125   1        for(i=1;i<8;i++)
3126   1        {
3127   2          Week_display(i);
3128   2          FD616_Refresh();
3129   2          Delay_ms(1000);
3130   2        }
3131   1            TR0=1;
3132   1          Delay_ms(1000);
3133   1          TR0=0;
3134   1          buzzer=0;
3135   1        
3136   1      }
3137          
C51 COMPILER V9.52.0.0   USR                                                               07/26/2018 17:42:19 PAGE 52  

3138          void power_detect(void)
3139          {
3140   1      
3141   1        GPIO_Init(P01F,INPUT|PD_EN);
3142   1        if(power_key==0)
3143   1        {
3144   2          if(power_first==0)
3145   2          {
3146   3            power_delay_time=0;
3147   3            power_first=1;
3148   3          }
3149   2          
3150   2          if(power_delay_time>30)
3151   2          {
3152   3            sd_mode_flag=1;
3153   3            sd_flag=1;
3154   3            voice_flag=0;//���ؼ�ؿ���1����
3155   3            back_voice_Flag=0;
3156   3            power_delay_time=0;
3157   3            power_first=0;
3158   3          }
3159   2        }
3160   1        else
3161   1        {
3162   2          power_delay_time=0;
3163   2        }
3164   1      
3165   1      }
3166          
3167          
3168            void hour_chage_input(UINT8 i)
3169            {//24Сʱת12Сʱ
3170   1          UINT8 hour_state_value;
3171   1          ResetDS1302();              
3172   1          WriteByteDS1302(hour_r_addr); //��ȡʱ�ĵ�ַ
3173   1          hour_state_value=ReadByteDS1302();
3174   1          if(i==1)    
3175   1          {
3176   2      
3177   2                  
3178   2            hour_state_value = bcd_decimal(hour_state_value);       
3179   2          if(hour_state_value>12)
3180   2          {
3181   3            hour_state_value=hour_state_value-12;
3182   3            hour_state_value=decimal_bcd(hour_state_value);
3183   3            hour_state_value |=(1<<5);
3184   3            hour_state_value |= (1<<7);
3185   3            hour_pm_flag=1;
3186   3          }
3187   2          else if(hour_state_value==12)
3188   2          {
3189   3           hour_pm_flag=1;
3190   3            hour_state_value=decimal_bcd(hour_state_value);
3191   3            hour_state_value |=(1<<5);
3192   3            hour_state_value |= (1<<7);
3193   3          }
3194   2            else if(hour_state_value<12)
3195   2            {
3196   3            hour_state_value=decimal_bcd(hour_state_value);
3197   3            hour_state_value |= (1<<7);
3198   3            }
3199   2      
C51 COMPILER V9.52.0.0   USR                                                               07/26/2018 17:42:19 PAGE 53  

3200   2              
3201   2          }
3202   1          if(i==0)    
3203   1          {
3204   2            //12Сʱת24Сʱ
3205   2            if(hour_state_value&0x20)
3206   2            {
3207   3              hour_state_value&=~(1<<7);
3208   3              hour_state_value &=~(1<<5);       
3209   3              hour_pm_flag=0;
3210   3              hour_state_value = bcd_decimal(hour_state_value);   
3211   3              if(hour_state_value!=12)
3212   3              hour_state_value=hour_state_value+12;
3213   3              hour_state_value=decimal_bcd(hour_state_value);
3214   3            }
3215   2            else
3216   2            {
3217   3            hour_state_value&=~(1<<7);  
3218   3            hour_state_value = bcd_decimal(hour_state_value);
3219   3            if(hour_state_value==12)hour_state_value=0;
3220   3            hour_state_value=decimal_bcd(hour_state_value);
3221   3            
3222   3            }
3223   2            
3224   2            
3225   2          }
3226   1          ds1302_w_on();
3227   1          ResetDS1302();
3228   1          WriteByteDS1302(hour_w_addr); //д��ʱ�ĵ�ַ
3229   1          WriteByteDS1302(hour_state_value);
3230   1          ds1302_w_off();   
3231   1        }
3232            
3233            
3234            void hour_min_display(void)
3235            {
3236   1            anode_display(FD616_DIG4_ADDR,dis[time.hour/10]);
3237   1            anode_display(FD616_DIG5_ADDR,dis[time.hour%10]);
3238   1            anode_display(FD616_DIG6_ADDR,dis[time.minute/10]);
3239   1            anode_display(FD616_DIG7_ADDR,dis[time.minute%10]);
3240   1          
3241   1            if(HalfSecFlag)
3242   1            {
3243   2              if(blink_flag)    
3244   2              {
3245   3                blink_flag=0;                           
3246   3                FD616_DispBuff.DispData[14] &= ~(1<<4);
3247   3                      
3248   3              }
3249   2              else 
3250   2              {
3251   3                  blink_flag=1; 
3252   3                  FD616_DispBuff.DispData[14] |= 1<<4;
3253   3                                        
3254   3              }
3255   2              if(hour_pm_flag)  FD616_DispBuff.DispData[14] |= 1<<3;
3256   2              if(alarm1.alarm_on_dispaly||alarm2.alarm_on_dispaly||alarm3.alarm_on_dispaly)       FD616_DispBuff.DispDa
             -ta[14] |= 1<<6;
3257   2              FD616_Refresh();        
3258   2              HalfSecFlag=0;  
3259   2            } 
3260   1        }
C51 COMPILER V9.52.0.0   USR                                                               07/26/2018 17:42:19 PAGE 54  

3261            
3262          void from_ds1302_read_time_data(void)
3263          {
3264   1        //        UINT8 pm_flag;
3265   1            ResetDS1302();  
3266   1            WriteByteDS1302(0xbf);                                          //�Զ��ֽڷ�ʽ��ȡʱ�ӼĴ�������
3267   1            time.second=ReadByteDS1302();
3268   1            time.minute=ReadByteDS1302();
3269   1            time.hour=ReadByteDS1302();
3270   1            time.mday=ReadByteDS1302();
3271   1            time.month=ReadByteDS1302();
3272   1            time.week=ReadByteDS1302();
3273   1            time.year=ReadByteDS1302();
3274   1            ResetDS1302();
3275   1            if(hour_12_24_flag==1)
3276   1            {
3277   2             if((time.hour&0x20)&&(time.hour&0x80))
3278   2               { 
3279   3                 hour_pm_flag=1;
3280   3               }
3281   2               else 
3282   2               {                 
3283   3                 hour_pm_flag=0;
3284   3               }
3285   2              time.hour<<=3;
3286   2              time.hour>>=3;
3287   2            
3288   2            }
3289   1            time.year = bcd_decimal(time.year); 
3290   1            time.month =bcd_decimal(time.month);
3291   1            time.mday = bcd_decimal(time.mday);
3292   1            time.week = bcd_decimal(time.week);
3293   1            time.hour = bcd_decimal(time.hour);
3294   1            time.minute = bcd_decimal(time.minute);
3295   1            time.second = bcd_decimal(time.second);
3296   1      }
3297          
3298          
3299          
3300          void mon_over_judge(void)
3301          {
3302   1        if(time.month >=13)time.month=1;
3303   1        if(time.month ==0)time.month=12;
3304   1        if(time.month==4||time.month==6||time.month==9||time.month==11) 
3305   1        {if(time.mday==31)time.mday=1;time.mday = decimal_bcd(time.mday);Write_addr_byte_ds1302(day_w_addr,time.m
             -day);}
3306   1        if(time.month==2) 
3307   1        {if(time.mday>=30)time.mday=1;time.mday = decimal_bcd(time.mday);Write_addr_byte_ds1302(day_w_addr,time.m
             -day);}
3308   1      }
3309          
3310          void mday_over_judge(void)
3311          {
3312   1            unsigned long year1;
3313   1            year1 = 2000+time.year; 
3314   1            flag_year_leap=leep_year(year1);//???????  
3315   1      //      if(time.mday>=30)   
3316   1      //     {          
3317   1            if(time.month==1||time.month==3||time.month==5||time.month==7||time.month==8||time.month==10||time.mont
             -h==12)  //?????31????£?1??3??5??7??8??10??12      
3318   1               {     
3319   2                  if(time.mday==32)  time.mday=1;
C51 COMPILER V9.52.0.0   USR                                                               07/26/2018 17:42:19 PAGE 55  

3320   2                 if(time.mday==0)    time.mday=31;
3321   2                 
3322   2              }          
3323   1            if(time.month==4||time.month==6||time.month==9||time.month==11)  
3324   1                {     
3325   2                 if(time.mday==31)   time.mday=1;
3326   2                  if(time.mday==0)   time.mday=30;        
3327   2                 }         
3328   1      //      }     
3329   1             if(time.month==2)    
3330   1              {      
3331   2                if(flag_year_leap&&(time.mday==30))                    time.mday=1;
3332   2                if(flag_year_leap&&(time.mday==0))                   time.mday=29;
3333   2                if((!flag_year_leap)&&(time.mday==29))                 time.mday=1;
3334   2                if((!flag_year_leap)&&(time.mday==0))                time.mday=28;
3335   2              }
3336   1      }
3337          
3338          
3339          void alarm_12switch24(struct  DATA_ALARM* alarm)
3340          {
3341   1        if(alarm->alarm_pm_flag)
3342   1        {
3343   2          if(alarm->hour!=12)alarm->hour+=12;
3344   2          alarm->alarm_pm_flag=0;
3345   2        }
3346   1        else if(alarm->hour==12)alarm->hour=0;
3347   1      }
3348          
3349          void alarm_24switch12(struct  DATA_ALARM* alarm)
3350          {
3351   1        if(alarm->hour>12)
3352   1        {
3353   2          alarm->hour-=12;
3354   2          alarm->alarm_pm_flag=1;
3355   2        }
3356   1        if(alarm->hour==12)alarm->alarm_pm_flag=1;
3357   1        if(alarm->hour==0){alarm->hour=12;alarm->alarm_pm_flag=0;}
3358   1      }
3359          
3360          void hour_over_judge(UINT8 add_redue_flag)
3361          {
3362   1          if(hour_12_24_flag)
3363   1          {
3364   2      
3365   2            switch(add_redue_flag)
3366   2            {
3367   3              case 0:
3368   3              {
3369   4                if(time.hour==12) after_arrive_write_1302();
3370   4                if(time.hour>=13)              time.hour = 1;
3371   4                break;
3372   4              }
3373   3              case 1:
3374   3              {
3375   4                if(time.hour==11) after_arrive_write_1302();
3376   4                if(time.hour==0)               time.hour = 12;
3377   4                break;
3378   4              }       
3379   3            }     
3380   2          }
3381   1          else
C51 COMPILER V9.52.0.0   USR                                                               07/26/2018 17:42:19 PAGE 56  

3382   1          {
3383   2            switch(add_redue_flag)
3384   2            {
3385   3              case 0:
3386   3              {
3387   4                if(time.hour >=24) time.hour = 0;
3388   4                break;
3389   4              }
3390   3              case 1:
3391   3              {
3392   4                if(time.hour ==255) time.hour = 23;
3393   4                break;
3394   4              }       
3395   3            }     
3396   2      
3397   2          }
3398   1      
3399   1            time.hour = decimal_bcd(time.hour);
3400   1            if(hour_12_24_flag)
3401   1            {
3402   2              time.hour |=1<<7;
3403   2              if(hour_pm_flag)time.hour |=1<<5;
3404   2              else time.hour &=~(1<<5);
3405   2            }
3406   1            else time.hour &=~(1<<7);
3407   1            Write_addr_byte_ds1302(hour_w_addr,time.hour);  
3408   1              
3409   1            
3410   1      }
3411          void min_over_judge(UINT8 add_redue_flag)
3412          {
3413   1        switch(add_redue_flag)
3414   1        {
3415   2          case 0:
3416   2          {
3417   3            if(time.minute >=60)time.minute = 0;
3418   3            break;
3419   3          }
3420   2          case 1:
3421   2          {
3422   3            if(time.minute==255)time.minute=59;
3423   3            break;
3424   3          }   
3425   2        }
3426   1        Write_addr_byte_ds1302(sec_w_addr,0);
3427   1        time.minute = decimal_bcd(time.minute);                   
3428   1        Write_addr_byte_ds1302(min_w_addr,time.minute);
3429   1      }
3430          
3431          void alarm_on_off_set(UINT8 alarm_num,struct  DATA_ALARM* alarm )
3432          {
3433   1          anode_display(FD616_DIG1_ADDR,FD616_DISP_A_DATA);
3434   1          anode_display(FD616_DIG2_ADDR,FD616_DISP_L_DATA );
3435   1          if(alarm_num==1)anode_display(FD616_DIG3_ADDR,dis[alarm_num] );
3436   1          else anode_display(FD616_DIG3_ADDR,dis[alarm_num]|DISP_BIT_G2 );
3437   1          if(time1_second==1)
3438   1          {   
3439   2            if(blink2_flag)
3440   2            {
3441   3              if(alarm->alarm_on_dispaly==0)
3442   3            {
3443   4      
C51 COMPILER V9.52.0.0   USR                                                               07/26/2018 17:42:19 PAGE 57  

3444   4            
3445   4              anode_display(FD616_DIG4_ADDR,0x00);
3446   4              anode_display(FD616_DIG5_ADDR,0x5c);  
3447   4              anode_display(FD616_DIG6_ADDR,FD612_DISP_F);
3448   4              anode_display(FD616_DIG7_ADDR,FD612_DISP_F);                    
3449   4            
3450   4            }
3451   3            else
3452   3            {
3453   4              anode_display(FD616_DIG4_ADDR,0x00);
3454   4              anode_display(FD616_DIG5_ADDR,0x5c);  
3455   4              anode_display(FD616_DIG6_ADDR,0x54);
3456   4              anode_display(FD616_DIG7_ADDR,0x00);                                          
3457   4            }
3458   3              
3459   3              blink2_flag=0;
3460   3              
3461   3        //                    FD616_Refresh();
3462   3      
3463   3            }
3464   2            else
3465   2            {
3466   3              anode_display(FD616_DIG4_ADDR,0x00);
3467   3              anode_display(FD616_DIG5_ADDR,0x00);  
3468   3              anode_display(FD616_DIG6_ADDR,0x00);
3469   3              anode_display(FD616_DIG7_ADDR,0x00);
3470   3              blink2_flag=1;
3471   3      
3472   3            }
3473   2      
3474   2          time1_second=0;
3475   2          }
3476   1          if(alarm->alarm_on_dispaly)       FD616_DispBuff.DispData[14] |= 1<<6;
3477   1          FD616_Refresh();  
3478   1           if(UP_Short_Flag==1)
3479   1          {
3480   2            if(alarm->alarm_on_dispaly)alarm->alarm_on_dispaly=0;
3481   2            else alarm->alarm_on_dispaly=1;                 
3482   2            UP_Short_Flag=0;
3483   2          }   
3484   1          
3485   1      }
3486          
3487          void alarm_hour_blink(UINT8 blink_enable,struct  DATA_ALARM* alarm)
3488          {
3489   1        anode_display(FD616_DIG6_ADDR,dis[alarm->minute/10]);
3490   1        anode_display(FD616_DIG7_ADDR,dis[alarm->minute%10]);
3491   1        if(time1_second==1)
3492   1        {
3493   2            if(blink2_flag)
3494   2            {
3495   3              anode_display(FD616_DIG4_ADDR,dis[alarm->hour/10]);
3496   3              anode_display(FD616_DIG5_ADDR,dis[alarm->hour%10]);     
3497   3              if(blink_enable==0)blink2_flag=0;
3498   3      
3499   3      
3500   3            }
3501   2            else
3502   2            {
3503   3                blink2_flag=1;        
3504   3                anode_display(FD616_DIG4_ADDR,0x00);
3505   3                anode_display(FD616_DIG5_ADDR,0x00);        
C51 COMPILER V9.52.0.0   USR                                                               07/26/2018 17:42:19 PAGE 58  

3506   3            }
3507   2            if(alarm->alarm_pm_flag)  FD616_DispBuff.DispData[14] |= 1<<3;
3508   2            if(alarm->alarm_on_dispaly)       FD616_DispBuff.DispData[14] |= 1<<6;
3509   2            FD616_DispBuff.DispData[14] |= 1<<4;  
3510   2            FD616_Refresh();        
3511   2            time1_second=0;
3512   2        } 
3513   1      }
3514          void alarm_hour_set(struct  DATA_ALARM* alarm)
3515          {
3516   1        alarm_hour_blink(0,alarm);
3517   1        if(UP_Short_Flag==1)
3518   1        {
3519   2          alarm->hour++;
3520   2          alarm_hour_up_down(0,0,alarm);
3521   2          
3522   2          UP_Short_Flag=0;
3523   2        }
3524   1        if(DOWN_Short_Flag == 1)
3525   1        {
3526   2          DOWN_Short_Flag =0;
3527   2          alarm->hour--;
3528   2          alarm_hour_up_down(0,1,alarm);
3529   2        }
3530   1        
3531   1      }
3532          
3533          void alarm_hour_up_down(UINT8 long_key_enble,UINT8 up_down_seclect,struct DATA_ALARM * alarm)
3534          {
3535   1        if(up_down_seclect==0)
3536   1        {
3537   2          if(long_key_enble)alarm->hour++;
3538   2          if(hour_12_24_flag)
3539   2          {
3540   3            if(alarm->hour>=13)alarm->hour = 1;
3541   3            if(alarm->hour==12)
3542   3            {
3543   4              if(alarm->alarm_pm_flag)alarm->alarm_pm_flag=0;
3544   4              else alarm->alarm_pm_flag=1;
3545   4            }
3546   3          }
3547   2          else
3548   2          {
3549   3            if(alarm->hour >=24)      alarm->hour = 0;
3550   3          }
3551   2        }
3552   1        if(up_down_seclect==1)
3553   1        {
3554   2          if(long_key_enble)alarm->hour--;
3555   2          if(hour_12_24_flag)
3556   2          {
3557   3            if(alarm->hour==0)alarm->hour = 12;
3558   3            if(alarm->hour==11)
3559   3            {
3560   4              if(alarm->alarm_pm_flag)alarm->alarm_pm_flag=0;
3561   4              else alarm->alarm_pm_flag=1;
3562   4            }     
3563   3          }
3564   2          else
3565   2          {
3566   3            if(alarm->hour >=255)     alarm->hour = 23;
3567   3          }
C51 COMPILER V9.52.0.0   USR                                                               07/26/2018 17:42:19 PAGE 59  

3568   2        }
3569   1         //FD612_DISPLAY_2DIG_input(1 , dis[alarm->hour/10],dis[alarm->hour%10] );
3570   1      //  FD612_DISPLAY_2DIG_input(2,0x00 ,dis[alarm->alarm_pm_flag] );
3571   1         if(long_key_enble)
3572   1         {
3573   2              anode_display(FD616_DIG4_ADDR,dis[alarm->hour/10]);
3574   2              anode_display(FD616_DIG5_ADDR,dis[alarm->hour%10]);
3575   2              if(alarm->alarm_pm_flag)  FD616_DispBuff.DispData[14] |= 1<<3;
3576   2              if(alarm->alarm_on_dispaly)       FD616_DispBuff.DispData[14] |= 1<<6;
3577   2              FD616_DispBuff.DispData[14] |= 1<<4;  
3578   2              FD616_Refresh();                
3579   2              back_TIME_Flag=0;
3580   2              Delay_ms(up_down_delay_time);
3581   2         }
3582   1      }
3583          
3584          
3585          void alarm_min_blink(UINT8 blink_enable,struct  DATA_ALARM* alarm)
3586          {
3587   1          anode_display(FD616_DIG4_ADDR,dis[alarm->hour/10]);
3588   1          anode_display(FD616_DIG5_ADDR,dis[alarm->hour%10]);         
3589   1          if(time1_second==1)
3590   1          {
3591   2            if(blink2_flag)
3592   2              {
3593   3                if(blink_enable==0)blink2_flag=0;               
3594   3                anode_display(FD616_DIG6_ADDR,dis[alarm->minute/10]);
3595   3                anode_display(FD616_DIG7_ADDR,dis[alarm->minute%10]);                                                         
3596   3              }
3597   2            else
3598   2             {
3599   3                blink2_flag=1;                
3600   3                anode_display(FD616_DIG6_ADDR,0x00);
3601   3                anode_display(FD616_DIG7_ADDR,0x00);
3602   3                                        
3603   3             }
3604   2          
3605   2            if(alarm->alarm_pm_flag)  FD616_DispBuff.DispData[14] |= 1<<3;
3606   2            if(alarm->alarm_on_dispaly)       FD616_DispBuff.DispData[14] |= 1<<6;
3607   2            FD616_DispBuff.DispData[14] |= 1<<4;  
3608   2            FD616_Refresh();
3609   2            time1_second=0;
3610   2      
3611   2         }
3612   1      }
3613          void alarm_min_set(struct  DATA_ALARM* alarm)
3614          {
3615   1            alarm_min_blink(0, alarm);
3616   1            if(UP_Short_Flag == 1)
3617   1            {
3618   2              alarm->minute++;
3619   2              alarm_min_up_down(0,0, alarm);
3620   2              UP_Short_Flag =0;
3621   2            }
3622   1            if(DOWN_Short_Flag == 1)
3623   1            {
3624   2              alarm->minute--;
3625   2              alarm_min_up_down(0,1, alarm);
3626   2              DOWN_Short_Flag=0;
3627   2            }
3628   1      }
3629          void alarm_min_up_down(UINT8 long_key_enble,UINT8 up_down_seclect,struct DATA_ALARM* alarm)
C51 COMPILER V9.52.0.0   USR                                                               07/26/2018 17:42:19 PAGE 60  

3630          {
3631   1        if(up_down_seclect==0)
3632   1        {
3633   2          if(long_key_enble)alarm->minute++;
3634   2          if(alarm->minute >=60)alarm->minute = 0;
3635   2        }
3636   1        else
3637   1        {
3638   2          if(long_key_enble)alarm->minute--;
3639   2          if(alarm->minute ==255)alarm->minute = 59;
3640   2        }
3641   1      //  FD612_DISPLAY_2DIG_input(2,dis[alarm->minute/10]  ,dis[alarm->minute%10] );
3642   1        
3643   1        if(long_key_enble)
3644   1         {
3645   2              anode_display(FD616_DIG6_ADDR,dis[alarm->minute/10]);
3646   2              anode_display(FD616_DIG7_ADDR,dis[alarm->minute%10]);
3647   2              if(alarm->alarm_pm_flag)  FD616_DispBuff.DispData[14] |= 1<<3;
3648   2              if(alarm->alarm_on_dispaly)       FD616_DispBuff.DispData[14] |= 1<<6;
3649   2              FD616_DispBuff.DispData[14] |= 1<<4;  
3650   2              FD616_Refresh();                
3651   2              back_TIME_Flag=0;
3652   2              Delay_ms(up_down_delay_time);
3653   2         }
3654   1      }
3655          
3656          
3657          void key_off_alarm_clock(struct  DATA_ALARM* alarm)
3658          {
3659   1        if(alarm->alarm_flag==1)
3660   1      {
3661   2        if(SET==0||UP==0||DOWN==0)
3662   2        {
3663   3          alarm->alarm_flag=0;
3664   3          buzzer=0;
3665   3          TR0=0;
3666   3          alarm_voice_flag=0;   
3667   3        }
3668   2      }
3669   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =  11598    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     84      79
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =     14    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
